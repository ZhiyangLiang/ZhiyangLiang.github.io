<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何打包训练环境 (conda pack)</title>
    <link href="/2024/04/17/%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%20(conda-pack)/"/>
    <url>/2024/04/17/%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E8%AE%AD%E7%BB%83%E7%8E%AF%E5%A2%83%20(conda-pack)/</url>
    
    <content type="html"><![CDATA[<ul><li>打包环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@autodl-container-f4d5458449-4ea6d9e7:~<span class="hljs-comment"># conda create -n llm_env --clone base</span><br>Source:      /root/miniconda3<br>Destination: /root/miniconda3/envs/llm_env<br>The following packages cannot be cloned out of the root environment:<br> - defaults/linux-64::conda-4.10.3-py38h06a4308_0<br>Packages: 34<br>Files: 35817<br>Preparing transaction: <span class="hljs-keyword">done</span><br>Verifying transaction: <span class="hljs-keyword">done</span><br>Executing transaction: <span class="hljs-keyword">done</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To activate this environment, use</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     $ conda activate llm_env</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To deactivate an active environment, use</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     $ conda deactivate</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@autodl-container-f4d5458449-4ea6d9e7:~<span class="hljs-comment"># conda env list</span><br><span class="hljs-comment"># conda environments:</span><br><span class="hljs-comment">#</span><br>base                  *  /root/miniconda3<br>llm_env                    /root/miniconda3/envs/llm_env<br></code></pre></td></tr></table></figure><ul><li>conda pack</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装conda pack</span><br>conda install conda-pack<br><br>RemoveError: ‘requests’ is a dependency of conda and cannot be removed from conda’s operating environment.<br>conda update --force conda<br><br>CondaHTTPError: HTTP 429 TOO MANY REQUESTS <span class="hljs-keyword">for</span> url &lt;https://mirrors.ustc.edu.cn/anaconda/pkgs/main/linux-64/current_repodata.json&gt; Elapsed: 00:46.163959<br><br>step 1:<br>root@autodl-container-f4d5458449-4ea6d9e7:~<span class="hljs-comment"># vim ~/.condarc</span><br>root@autodl-container-f4d5458449-4ea6d9e7:~<span class="hljs-comment"># cat ~/.condarc</span><br>auto_activate_base: <span class="hljs-literal">false</span><br>show_channel_urls: <span class="hljs-literal">true</span><br>ssl_verify: <span class="hljs-literal">false</span><br>channels:<br>  - conda-forge<br>  - &lt;http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/&gt;<br>  - &lt;http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/&gt;<br>  - &lt;http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/&gt;<br>  - &lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/&gt;<br>  - &lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge&gt;<br>  - &lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/&gt;<br>  - defaults<br><br>step 2:<br>conda create --name superset python=3.8<br><br><span class="hljs-comment"># 打包环境</span><br>conda pack -n llm_env<br><br>root@autodl-container-30da119afa-edacec3e:~<span class="hljs-comment"># conda pack -n llm_env</span><br>Collecting packages...<br>CondaPackError: Cannot pack an environment with editable packages<br>installed (e.g. from `python setup.py develop` or<br> `pip install -e`). Editable packages found:<br><br>- /root/autodl-tmp/peft/src<br><br>conda pack -n llm_env --ignore-editable-packages<br></code></pre></td></tr></table></figure><ul><li>安装环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在跳板机进行上传</span><br>scp llm_env.tar.gz lanlong@172.20.208.8:~/zyliang<br><br><span class="hljs-comment"># 与向上传相应的, 补充一个向下取的例子; 但是跳板机比较特殊, 将文件传到跳板机需要用FileZilla</span><br>scp -rP 35381 root@region-9.autodl.pro:~/llm_env.tar.gz ~/zyliang<br><br><span class="hljs-comment"># 在目标服务器进行安装</span><br><span class="hljs-built_in">mkdir</span> -p llm_env<br><br>(base) lanlong@a101:~/zyliang$ tar -xzf llm_env.tar.gz -C llm_env<br>(base) lanlong@a101:~/zyliang$ <span class="hljs-built_in">cd</span> llm_env<br>(base) lanlong@a101:~/zyliang/llm_env$ <span class="hljs-built_in">ls</span><br>bin              conda-meta  include  lib    ssl                          x86_64-conda-linux-gnu<br>compiler_compat  etc         info     share  x86_64-conda_cos6-linux-gnu<br><br>./llm_env/bin/python <span class="hljs-comment"># 测试</span><br>ctrl + z 退出<br><span class="hljs-built_in">source</span> llm_env/bin/activate <span class="hljs-comment"># 激活环境, llm_env/bin 会被添加到环境变量</span><br>python <span class="hljs-comment"># 在环境中运行python</span><br>conda-unpack <span class="hljs-comment"># 在激活环境中清楚前缀</span><br>ipython --version<br><br><span class="hljs-comment"># 若不再使用</span><br><span class="hljs-built_in">source</span> llm_env/bin/deactivate <span class="hljs-comment"># 停用环境并将其从环境变量中删除</span><br></code></pre></td></tr></table></figure><ul><li>Ubuntu更换镜像</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">cd /etc/apt/<br>sudo cp sources.<span class="hljs-built_in">list</span> sources.<span class="hljs-built_in">list</span>.old<br>sudo vim /etc/apt/sources.<span class="hljs-built_in">list</span><br><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main universe restricted multiverse<br>deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Basic Skills</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DeepSpeed</title>
    <link href="/2024/02/27/DeepSpeed/"/>
    <url>/2024/02/27/DeepSpeed/</url>
    
    <content type="html"><![CDATA[<ul><li>安装DeepSpeed</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/microsoft/DeepSpeed.git<br><span class="hljs-built_in">cd</span> DeepSpeed<br>git checkout v0.9.5<br><br>TORCH_CUDA_ARCH_LIST=<span class="hljs-string">&quot;6.1;7.5;8.6;8.9&quot;</span> \<br>DS_BUILD_CCL_COMM=1 \<br>DS_BUILD_CPU_ADAM=1 \<br>DS_BUILD_CPU_ADAGRAD=1 \<br>DS_BUILD_FUSED_ADAM=1 \<br>DS_BUILD_FUSED_LAMB=1 \<br>DS_BUILD_UTILS=1 \<br>python setup.py build_ext -j24 bdist_wheel<br><br><span class="hljs-comment"># 进入DeepSpeed目录下的dist目录, 安装whl文件</span><br>pip install *.whl<br></code></pre></td></tr></table></figure><p>更多配置信息可见于<ahref="https://github.com/OvJat/DeepSpeedTutorial">OvJat/DeepSpeedTutorial:DeepSpeed Tutorial (github.com)</a></p><ul><li>训练的模型不止一个时 (此处以stable diffusion为例), an example:</li></ul><p><ahref="https://github.com/Azure/azureml-examples/tree/main/cli/jobs/deepspeed/deepspeed-training/src">cli/jobs/deepspeed/deepspeed-training/src</a></p><ul><li>安装mpi4py</li></ul><p>sudo apt update sudo apt-get install libopenmpi-dev</p><p>pip install mpi4py</p><ul><li>hf与deepspeed的配置冲突, 将deepspeed的相应配置修改为”auto”</li></ul><p>"bf16": { "enabled": "auto" }</p><ul><li>使用deepspeed需要安装bitsandbytes</li></ul><p>pip install bitsandbytes</p><ul><li>多卡运行</li></ul><p>CUDA_VISIBLE_DEVICES=0,1 torchrun --nproc_per_node=2--master_port=29500 finetune.py</p><p>运行时间: 03:33&lt;12:41:38</p><ul><li>单卡运行</li></ul><p>CUDA_VISIBLE_DEVICES=0 torchrun --nproc_per_node=1--master_port=29500 finetune.py</p><p>运行时间: 03:38&lt;46:53:33</p><ul><li>如何调用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 单GPU的使用方法</span><br>deepspeed --num_gpus=1 examples/pytorch/translation/run_translation.py ...<br><span class="hljs-comment"># 单GPU并指定对应的GPU</span><br>deepspeed --include localhost:1 examples/pytorch/translation/run_translation.py ...<br><span class="hljs-comment"># 单GPU使用DeepSpeed的优势:</span><br><span class="hljs-comment"># 使用ZeRO-offload, 将部分数据offload到CPU，降低对显存的需求</span><br><span class="hljs-comment"># 提供对显存的管理, 减少显存的碎片</span><br><br><span class="hljs-comment"># 多GPU的使用方法1</span><br>torch.distributed.run --nproc_per_node=2 your_program.py &lt;normal cl args&gt; --deepspeed ds_config.json<br><span class="hljs-comment"># 多GPU的使用方法2</span><br>deepspeed --num_gpus=2 your_program.py &lt;normal cl args&gt; --deepspeed ds_config.json<br><br><span class="hljs-comment"># 多节点多卡方法1，需要在多个节点上手动启动</span><br>python -m torch.distributed.run --nproc_per_node=8 --nnode=2 --node_rank=0 --master_addr=hostname1 --master_port=9901 your_program.py &lt;normal cl args&gt; --deepspeed ds_config.json<br><span class="hljs-comment"># 多节点多卡方法2，需要创建一个 hostfile 文件，只需在一个节点上启动</span><br>hostname1 slots=8  <span class="hljs-comment"># 表示该机器有8个GPU用于训练</span><br>hostname2 slots=8<br><span class="hljs-comment"># 然后运行</span><br>deepspeed --num_gpus 8 --num_nodes 2 --hostfile hostfile --master_addr hostname1 --master_port=9901 your_program.py &lt;normal cl args&gt; --deepspeed ds_config.json<br></code></pre></td></tr></table></figure><ul><li>传递参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">TrainingArguments(..., deepspeed=<span class="hljs-string">&quot;config/ds_config.json&quot;</span>)<br><span class="hljs-comment"># or</span><br>ds_config_dict = <span class="hljs-built_in">dict</span>(scheduler=scheduler_params, optimizer=optimizer_params)<br>TrainingArguments(..., deepspeed=ds_config_dict)<br></code></pre></td></tr></table></figure><ul><li>ZeRO-stage-0配置示例</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"># 禁用所有的分片<span class="hljs-punctuation">,</span> 把DeepSpeed当作DDP来使用<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;zero_optimization&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;stage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>ZeRO-stage-1配置示例</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;zero_optimization&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;stage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>ZeRO-stage-2配置示例</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fp16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loss_scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loss_scale_window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;initial_scale_power&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hysteresis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;min_loss_scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;optimizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AdamW&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;lr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;betas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;eps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;weight_decay&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;scheduler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WarmupLR&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warmup_min_lr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;warmup_max_lr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;warmup_num_steps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;zero_optimization&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;stage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;offload_optimizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;device&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpu&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;pin_memory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;allgather_partitions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;allgather_bucket_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2e8</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;overlap_comm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reduce_scatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reduce_bucket_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2e8</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;contiguous_gradients&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;gradient_accumulation_steps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gradient_clipping&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;steps_per_print&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;train_batch_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;train_micro_batch_size_per_gpu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;wall_clock_breakdown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>ZeRO-stage-3配置示例</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fp16&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loss_scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loss_scale_window&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;initial_scale_power&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;hysteresis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;min_loss_scale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;optimizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AdamW&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;lr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;betas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;eps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;weight_decay&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;scheduler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;WarmupLR&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;warmup_min_lr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;warmup_max_lr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;warmup_num_steps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;zero_optimization&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;stage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;offload_optimizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;device&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpu&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;pin_memory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;offload_param&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;device&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpu&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;pin_memory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;overlap_comm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;contiguous_gradients&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sub_group_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1e9</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;reduce_bucket_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;stage3_prefetch_bucket_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;stage3_param_persistence_threshold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;stage3_max_live_parameters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1e9</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;stage3_max_reuse_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1e9</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;stage3_gather_16bit_weights_on_model_save&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>    <span class="hljs-attr">&quot;gradient_accumulation_steps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gradient_clipping&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;steps_per_print&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;train_batch_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;train_micro_batch_size_per_gpu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;wall_clock_breakdown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">// original</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     &quot;zero_optimization&quot;: &#123;</span><br><span class="hljs-comment">//         &quot;stage&quot;: 3,</span><br><span class="hljs-comment">//         &quot;offload_optimizer&quot;: &#123;</span><br><span class="hljs-comment">//             &quot;device&quot;: &quot;none&quot;,</span><br><span class="hljs-comment">//             &quot;pin_memory&quot;: true</span><br><span class="hljs-comment">//         &#125;,</span><br><span class="hljs-comment">//         &quot;offload_param&quot;: &#123;</span><br><span class="hljs-comment">//             &quot;device&quot;: &quot;none&quot;,</span><br><span class="hljs-comment">//             &quot;pin_memory&quot;: true</span><br><span class="hljs-comment">//         &#125;,</span><br><span class="hljs-comment">//         &quot;overlap_comm&quot;: true,</span><br><span class="hljs-comment">//         &quot;contiguous_gradients&quot;: true,</span><br><span class="hljs-comment">//         &quot;sub_group_size&quot;: 1e9,</span><br><span class="hljs-comment">//         &quot;reduce_bucket_size&quot;: &quot;auto&quot;,</span><br><span class="hljs-comment">//         &quot;stage3_prefetch_bucket_size&quot;: &quot;auto&quot;,</span><br><span class="hljs-comment">//         &quot;stage3_param_persistence_threshold&quot;: &quot;auto&quot;,</span><br><span class="hljs-comment">//         &quot;stage3_max_live_parameters&quot;: 1e9,</span><br><span class="hljs-comment">//         &quot;stage3_max_reuse_distance&quot;: 1e9,</span><br><span class="hljs-comment">//         &quot;stage3_gather_16bit_weights_on_model_save&quot;: true</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">//     &quot;train_batch_size&quot;: &quot;auto&quot;,</span><br><span class="hljs-comment">//     &quot;train_micro_batch_size_per_gpu&quot;: &quot;auto&quot;,</span><br><span class="hljs-comment">//     &quot;gradient_accumulation_steps&quot;: &quot;auto&quot;,</span><br><span class="hljs-comment">//     &quot;bf16&quot;: &#123;</span><br><span class="hljs-comment">//         &quot;enabled&quot;: true</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><ul><li>inference</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">deepspeed --num_gpus=<span class="hljs-number">2</span> your_program.py &lt;normal cl args&gt; --do_eval --deepspeed ds_config.json<br></code></pre></td></tr></table></figure><ul><li>Accelerate</li></ul><p><ahref="https://zhuanlan.zhihu.com/p/462453622">🤗Accelerate库的使用指南和案例- 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>DDP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prompt Engineering</title>
    <link href="/2024/02/12/Prompt%20Engineering/"/>
    <url>/2024/02/12/Prompt%20Engineering/</url>
    
    <content type="html"><![CDATA[<ul><li>初始设置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv, find_dotenv<br>_ = load_dotenv(find_dotenv())<br><br>openai.api_key  = os.getenv(<span class="hljs-string">&#x27;OPENAI_API_KEY&#x27;</span>)<br><br><span class="hljs-comment"># OpenAI library version 0.27.0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_completion</span>(<span class="hljs-params">prompt, model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span></span>):<br>    messages = [&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;]<br>    response = openai.ChatCompletion.create(<br>        model=model,<br>        messages=messages,<br>        temperature=<span class="hljs-number">0</span>, <span class="hljs-comment"># this is the degree of randomness of the model&#x27;s output</span><br>    )<br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&quot;content&quot;</span>]<br>    <br><span class="hljs-comment"># OpenAI library version 1.0.0</span><br>client = openai.OpenAI()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_completion</span>(<span class="hljs-params">prompt, model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span></span>):<br>    messages = [&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;]<br>    response = client.chat.completions.create(<br>        model=model,<br>        messages=messages,<br>        temperature=<span class="hljs-number">0</span><br>    )<br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message.content<br></code></pre></td></tr></table></figure><ul><li><strong>Use delimiters to clearly indicate distinct parts of theinput</strong> • Delimiters can be anything like:``<code>, """, &lt; &gt;,</code><tag> </tag><code>,</code>:`</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">You should express what you want a model to do by \\ </span><br><span class="hljs-string">providing instructions that are as clear and \\ </span><br><span class="hljs-string">specific as you can possibly make them. \\ </span><br><span class="hljs-string">This will guide the model towards the desired output, \\ </span><br><span class="hljs-string">and reduce the chances of receiving irrelevant \\ </span><br><span class="hljs-string">or incorrect responses. Don&#x27;t confuse writing a \\ </span><br><span class="hljs-string">clear prompt with writing a short prompt. \\ </span><br><span class="hljs-string">In many cases, longer prompts provide more clarity \\ </span><br><span class="hljs-string">and context for the model, which can lead to \\ </span><br><span class="hljs-string">more detailed and relevant outputs.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Summarize the text delimited by triple backticks \\ </span><br><span class="hljs-string">into a single sentence.</span><br><span class="hljs-string">```<span class="hljs-subst">&#123;text&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li><strong>Ask for a structured output</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Generate a list of three made-up book titles along \\ </span><br><span class="hljs-string">with their authors and genres. </span><br><span class="hljs-string">Provide them in JSON format with the following keys: </span><br><span class="hljs-string">book_id, title, author, genre.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li><strong>Ask the model to check whether conditions aresatisfied</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python">text_1 = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Making a cup of tea is easy! First, you need to get some \\ </span><br><span class="hljs-string">water boiling. While that&#x27;s happening, \\ </span><br><span class="hljs-string">grab a cup and put a tea bag in it. Once the water is \\ </span><br><span class="hljs-string">hot enough, just pour it over the tea bag. \\ </span><br><span class="hljs-string">Let it sit for a bit so the tea can steep. After a \\ </span><br><span class="hljs-string">few minutes, take out the tea bag. If you \\ </span><br><span class="hljs-string">like, you can add some sugar or milk to taste. \\ </span><br><span class="hljs-string">And that&#x27;s it! You&#x27;ve got yourself a delicious \\ </span><br><span class="hljs-string">cup of tea to enjoy.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">You will be provided with text delimited by triple quotes. </span><br><span class="hljs-string">If it contains a sequence of instructions, \\ </span><br><span class="hljs-string">re-write those instructions in the following format:</span><br><span class="hljs-string"></span><br><span class="hljs-string">Step 1 - ...</span><br><span class="hljs-string">Step 2 - …</span><br><span class="hljs-string">…</span><br><span class="hljs-string">Step N - …</span><br><span class="hljs-string"></span><br><span class="hljs-string">If the text does not contain a sequence of instructions, \\ </span><br><span class="hljs-string">then simply write \\&quot;No steps provided.\\&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">\\&quot;\\&quot;\\&quot;<span class="hljs-subst">&#123;text_1&#125;</span>\\&quot;\\&quot;\\&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Completion for Text 1:&quot;</span>)<br><span class="hljs-built_in">print</span>(response)<br><br>text_2 = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">The sun is shining brightly today, and the birds are \\</span><br><span class="hljs-string">singing. It&#x27;s a beautiful day to go for a \\ </span><br><span class="hljs-string">walk in the park. The flowers are blooming, and the \\ </span><br><span class="hljs-string">trees are swaying gently in the breeze. People \\ </span><br><span class="hljs-string">are out and about, enjoying the lovely weather. \\ </span><br><span class="hljs-string">Some are having picnics, while others are playing \\ </span><br><span class="hljs-string">games or simply relaxing on the grass. It&#x27;s a \\ </span><br><span class="hljs-string">perfect day to spend time outdoors and appreciate the \\ </span><br><span class="hljs-string">beauty of nature.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">You will be provided with text delimited by triple quotes. </span><br><span class="hljs-string">If it contains a sequence of instructions, \\ </span><br><span class="hljs-string">re-write those instructions in the following format:</span><br><span class="hljs-string"></span><br><span class="hljs-string">Step 1 - ...</span><br><span class="hljs-string">Step 2 - …</span><br><span class="hljs-string">…</span><br><span class="hljs-string">Step N - …</span><br><span class="hljs-string"></span><br><span class="hljs-string">If the text does not contain a sequence of instructions, \\ </span><br><span class="hljs-string">then simply write \\&quot;No steps provided.\\&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">\\&quot;\\&quot;\\&quot;<span class="hljs-subst">&#123;text_2&#125;</span>\\&quot;\\&quot;\\&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Completion for Text 2:&quot;</span>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li><strong>"Few-shot" prompting</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to answer in a consistent style.</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;child&gt;: Teach me about patience.</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;grandparent&gt;: The river that carves the deepest \\ </span><br><span class="hljs-string">valley flows from a modest spring; the \\ </span><br><span class="hljs-string">grandest symphony originates from a single note; \\ </span><br><span class="hljs-string">the most intricate tapestry begins with a solitary thread.</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;child&gt;: Teach me about resilience.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li><strong>Specify the steps required to complete a task</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">In a charming village, siblings Jack and Jill set out on \\ </span><br><span class="hljs-string">a quest to fetch water from a hilltop \\ </span><br><span class="hljs-string">well. As they climbed, singing joyfully, misfortune \\ </span><br><span class="hljs-string">struck—Jack tripped on a stone and tumbled \\ </span><br><span class="hljs-string">down the hill, with Jill following suit. \\ </span><br><span class="hljs-string">Though slightly battered, the pair returned home to \\ </span><br><span class="hljs-string">comforting embraces. Despite the mishap, \\ </span><br><span class="hljs-string">their adventurous spirits remained undimmed, and they \\ </span><br><span class="hljs-string">continued exploring with delight.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># example 1</span><br>prompt_1 = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Perform the following actions: </span><br><span class="hljs-string">1 - Summarize the following text delimited by triple \\</span><br><span class="hljs-string">backticks with 1 sentence.</span><br><span class="hljs-string">2 - Translate the summary into French.</span><br><span class="hljs-string">3 - List each name in the French summary.</span><br><span class="hljs-string">4 - Output a json object that contains the following \\</span><br><span class="hljs-string">keys: french_summary, num_names.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Separate your answers with line breaks.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Text:</span><br><span class="hljs-string">```<span class="hljs-subst">&#123;text&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt_1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Completion for prompt 1:&quot;</span>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li><strong>Ask for output in a specified format</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt_2 = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to perform the following actions: </span><br><span class="hljs-string">1 - Summarize the following text delimited by </span><br><span class="hljs-string">  &lt;&gt; with 1 sentence.</span><br><span class="hljs-string">2 - Translate the summary into French.</span><br><span class="hljs-string">3 - List each name in the French summary.</span><br><span class="hljs-string">4 - Output a json object that contains the </span><br><span class="hljs-string">  following keys: french_summary, num_names.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Use the following format:</span><br><span class="hljs-string">Text: &lt;text to summarize&gt;</span><br><span class="hljs-string">Summary: &lt;summary&gt;</span><br><span class="hljs-string">Translation: &lt;summary translation&gt;</span><br><span class="hljs-string">Names: &lt;list of names in summary&gt;</span><br><span class="hljs-string">Output JSON: &lt;json with summary and num_names&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">Text: &lt;<span class="hljs-subst">&#123;text&#125;</span>&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt_2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\\nCompletion for prompt 2:&quot;</span>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li><strong>Instructing the model to work out its own solutionfirst</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to determine if the student&#x27;s solution \\</span><br><span class="hljs-string">is correct or not.</span><br><span class="hljs-string">To solve the problem do the following:</span><br><span class="hljs-string">- First, work out your own solution to the problem including the final total. </span><br><span class="hljs-string">- Then compare your solution to the student&#x27;s solution \\ </span><br><span class="hljs-string">and evaluate if the student&#x27;s solution is correct or not. </span><br><span class="hljs-string">Don&#x27;t decide if the student&#x27;s solution is correct until </span><br><span class="hljs-string">you have done the problem yourself.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Use the following format:</span><br><span class="hljs-string">Question:</span><br></code></pre></td></tr></table></figure><p>question here</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Student<span class="hljs-symbol">&#x27;s</span> solution:<br></code></pre></td></tr></table></figure><p>student's solution here</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Actual solution</span><span class="hljs-punctuation">:</span><br></code></pre></td></tr></table></figure><p>steps to work out the solution and your solution here</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-built_in">Is</span> the student<span class="hljs-comment">&#x27;s solution the same as actual solution \\</span><br>just calculated:<br></code></pre></td></tr></table></figure><p>yes or no</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">Student grade</span><span class="hljs-punctuation">:</span><br></code></pre></td></tr></table></figure><p>correct or incorrect</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Question:</span><br></code></pre></td></tr></table></figure><p>I'm building a solar power installation and I need help  working outthe financials.</p><ul><li>Land costs $100 / square foot</li><li>I can buy solar panels for $250 / square foot</li><li>I negotiated a contract for maintenance that will cost  me a flat$100k per year, and an additional $10 / square  foot What is the totalcost for the first year of operations  as a function of the number ofsquare feet.</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">Student<span class="hljs-symbol">&#x27;s</span> solution:<br></code></pre></td></tr></table></figure><p>Let x be the size of the installation in square feet. Costs:</p><ol type="1"><li>Land cost: 100x</li><li>Solar panel cost: 250x</li><li>Maintenance cost: 100,000 + 100x Total cost: 100x + 250x + 100,000 +100x = 450x + 100,000</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">Actual solution:<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-keyword">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li>Iterative</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># original</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to help a marketing team create a </span><br><span class="hljs-string">description for a retail website of a product based </span><br><span class="hljs-string">on a technical fact sheet.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Write a product description based on the information </span><br><span class="hljs-string">provided in the technical specifications delimited by </span><br><span class="hljs-string">triple backticks.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Technical specifications: ```<span class="hljs-subst">&#123;fact_sheet_chair&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># The text is too long</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to help a marketing team create a </span><br><span class="hljs-string">description for a retail website of a product based </span><br><span class="hljs-string">on a technical fact sheet.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Write a product description based on the information </span><br><span class="hljs-string">provided in the technical specifications delimited by </span><br><span class="hljs-string">triple backticks.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Use at most 50 words.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Technical specifications: ```<span class="hljs-subst">&#123;fact_sheet_chair&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Text focuses on the wrong details</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to help a marketing team create a </span><br><span class="hljs-string">description for a retail website of a product based </span><br><span class="hljs-string">on a technical fact sheet.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Write a product description based on the information </span><br><span class="hljs-string">provided in the technical specifications delimited by </span><br><span class="hljs-string">triple backticks.</span><br><span class="hljs-string"></span><br><span class="hljs-string">The description is intended for furniture retailers, </span><br><span class="hljs-string">so should be technical in nature and focus on the </span><br><span class="hljs-string">materials the product is constructed from.</span><br><span class="hljs-string"></span><br><span class="hljs-string">At the end of the description, include every 7-character </span><br><span class="hljs-string">Product ID in the technical specification.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Use at most 50 words.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Technical specifications: ```<span class="hljs-subst">&#123;fact_sheet_chair&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Description needs a table of dimensions</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to help a marketing team create a </span><br><span class="hljs-string">description for a retail website of a product based </span><br><span class="hljs-string">on a technical fact sheet.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Write a product description based on the information </span><br><span class="hljs-string">provided in the technical specifications delimited by </span><br><span class="hljs-string">triple backticks.</span><br><span class="hljs-string"></span><br><span class="hljs-string">The description is intended for furniture retailers, </span><br><span class="hljs-string">so should be technical in nature and focus on the </span><br><span class="hljs-string">materials the product is constructed from.</span><br><span class="hljs-string"></span><br><span class="hljs-string">At the end of the description, include every 7-character </span><br><span class="hljs-string">Product ID in the technical specification.</span><br><span class="hljs-string"></span><br><span class="hljs-string">After the description, include a table that gives the </span><br><span class="hljs-string">product&#x27;s dimensions. The table should have two columns.</span><br><span class="hljs-string">In the first column include the name of the dimension. </span><br><span class="hljs-string">In the second column include the measurements in inches only.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Give the table the title &#x27;Product Dimensions&#x27;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Format everything as HTML that can be used in a website. </span><br><span class="hljs-string">Place the description in a &lt;div&gt; element.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Technical specifications: ```<span class="hljs-subst">&#123;fact_sheet_chair&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># To view HTML</span><br><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> display, HTML<br>display(HTML(response))<br></code></pre></td></tr></table></figure><ul><li>Summarizing</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Summarize with a focus on price and value</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Your task is to generate a short summary of a product \\</span><br><span class="hljs-string">review from an ecommerce site to give feedback to the \\</span><br><span class="hljs-string">pricing deparmtment, responsible for determining the \\</span><br><span class="hljs-string">price of the product.  </span><br><span class="hljs-string"></span><br><span class="hljs-string">Summarize the review below, delimited by triple </span><br><span class="hljs-string">backticks, in at most 30 words, and focusing on any aspects \\</span><br><span class="hljs-string">that are relevant to the price and perceived value. </span><br><span class="hljs-string"></span><br><span class="hljs-string">Review: ```<span class="hljs-subst">&#123;prod_review&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Summarize multiple product reviews</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(reviews)):<br>    prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">    Your task is to generate a short summary of a product \\ </span><br><span class="hljs-string">    review from an ecommerce site. </span><br><span class="hljs-string"></span><br><span class="hljs-string">    Summarize the review below, delimited by triple \\</span><br><span class="hljs-string">    backticks in at most 20 words. </span><br><span class="hljs-string"></span><br><span class="hljs-string">    Review: ```<span class="hljs-subst">&#123;reviews[i]&#125;</span>```</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    response = get_completion(prompt)<br>    <span class="hljs-built_in">print</span>(i, response, <span class="hljs-string">&quot;\\n&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>Inferring</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Sentiment (positive/negative)</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">What is the sentiment of the following product review, </span><br><span class="hljs-string">which is delimited with triple backticks?</span><br><span class="hljs-string"></span><br><span class="hljs-string">Give your answer as a single word, either &quot;positive&quot; \\</span><br><span class="hljs-string">or &quot;negative&quot;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Review text: &#x27;&#x27;&#x27;<span class="hljs-subst">&#123;lamp_review&#125;</span>&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Identify types of emotions</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Identify a list of emotions that the writer of the \\</span><br><span class="hljs-string">following review is expressing. Include no more than \\</span><br><span class="hljs-string">five items in the list. Format your answer as a list of \\</span><br><span class="hljs-string">lower-case words separated by commas.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Review text: &#x27;&#x27;&#x27;<span class="hljs-subst">&#123;lamp_review&#125;</span>&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Identify anger</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Is the writer of the following review expressing anger?\\</span><br><span class="hljs-string">The review is delimited with triple backticks. \\</span><br><span class="hljs-string">Give your answer as either yes or no.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Review text: &#x27;&#x27;&#x27;<span class="hljs-subst">&#123;lamp_review&#125;</span>&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Doing multiple tasks at once</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Identify the following items from the review text: </span><br><span class="hljs-string">- Sentiment (positive or negative)</span><br><span class="hljs-string">- Is the reviewer expressing anger? (true or false)</span><br><span class="hljs-string">- Item purchased by reviewer</span><br><span class="hljs-string">- Company that made the item</span><br><span class="hljs-string"></span><br><span class="hljs-string">The review is delimited with triple backticks. \\</span><br><span class="hljs-string">Format your response as a JSON object with \\</span><br><span class="hljs-string">&quot;Sentiment&quot;, &quot;Anger&quot;, &quot;Item&quot; and &quot;Brand&quot; as the keys.</span><br><span class="hljs-string">If the information isn&#x27;t present, use &quot;unknown&quot; \\</span><br><span class="hljs-string">as the value.</span><br><span class="hljs-string">Make your response as short as possible.</span><br><span class="hljs-string">Format the Anger value as a boolean.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Review text: &#x27;&#x27;&#x27;<span class="hljs-subst">&#123;lamp_review&#125;</span>&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Infer 5 topics</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Determine five topics that are being discussed in the \\</span><br><span class="hljs-string">following text, which is delimited by triple backticks.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Make each item one or two words long. </span><br><span class="hljs-string"></span><br><span class="hljs-string">Format your response as a list of items separated by commas.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Text sample: &#x27;&#x27;&#x27;<span class="hljs-subst">&#123;story&#125;</span>&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li>Transforming</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Tone Transformation</span><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Translate the following from slang to a business letter: </span><br><span class="hljs-string">&#x27;Dude, This is Joe, check out this spec on this standing lamp.&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># Format Conversion</span><br>data_json = &#123; <span class="hljs-string">&quot;resturant employees&quot;</span> :[ <br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Shyam&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;shyamjaiswal@gmail.com&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;bob32@gmail.com&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Jai&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;jai87@gmail.com&quot;</span>&#125;<br>]&#125;<br><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">Translate the following python dictionary from JSON to an HTML \\</span><br><span class="hljs-string">table with column headers and title: <span class="hljs-subst">&#123;data_json&#125;</span></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> display, Markdown, Latex, HTML, JSON<br>display(HTML(response))<br><br><span class="hljs-comment"># Spellcheck/Grammar check</span><br>text = [ <br>  <span class="hljs-string">&quot;The girl with the black and white puppies have a ball.&quot;</span>,  <span class="hljs-comment"># The girl has a ball.</span><br>  <span class="hljs-string">&quot;Yolanda has her notebook.&quot;</span>, <span class="hljs-comment"># ok</span><br>  <span class="hljs-string">&quot;Its going to be a long day. Does the car need it’s oil changed?&quot;</span>,  <span class="hljs-comment"># Homonyms</span><br>  <span class="hljs-string">&quot;Their goes my freedom. There going to bring they’re suitcases.&quot;</span>,  <span class="hljs-comment"># Homonyms</span><br>  <span class="hljs-string">&quot;Your going to need you’re notebook.&quot;</span>,  <span class="hljs-comment"># Homonyms</span><br>  <span class="hljs-string">&quot;That medicine effects my ability to sleep. Have you heard of the butterfly affect?&quot;</span>, <span class="hljs-comment"># Homonyms</span><br>  <span class="hljs-string">&quot;This phrase is to cherck chatGPT for speling abilitty&quot;</span>  <span class="hljs-comment"># spelling</span><br>]<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> text:<br>    prompt = <span class="hljs-string">f&quot;&quot;&quot;Proofread and correct the following text</span><br><span class="hljs-string">    and rewrite the corrected version. If you don&#x27;t find</span><br><span class="hljs-string">    and errors, just say &quot;No errors found&quot;. Don&#x27;t use </span><br><span class="hljs-string">    any punctuation around the text:</span><br><span class="hljs-string">    ```<span class="hljs-subst">&#123;t&#125;</span>```&quot;&quot;&quot;</span><br>    response = get_completion(prompt)<br>    <span class="hljs-built_in">print</span>(response)<br>    <br><span class="hljs-keyword">from</span> redlines <span class="hljs-keyword">import</span> Redlines<br>diff = Redlines(text,response)<br>display(Markdown(diff.output_markdown))<br><br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">proofread and correct this review. Make it more compelling. </span><br><span class="hljs-string">Ensure it follows APA style guide and targets an advanced reader. </span><br><span class="hljs-string">Output in markdown format.</span><br><span class="hljs-string">Text: ```<span class="hljs-subst">&#123;text&#125;</span>```</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt)<br>display(Markdown(response))<br></code></pre></td></tr></table></figure><ul><li>Expanding</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">You are a customer service AI assistant.</span><br><span class="hljs-string">Your task is to send an email reply to a valued customer.</span><br><span class="hljs-string">Given the customer email delimited by ```, \\</span><br><span class="hljs-string">Generate a reply to thank the customer for their review.</span><br><span class="hljs-string">If the sentiment is positive or neutral, thank them for \\</span><br><span class="hljs-string">their review.</span><br><span class="hljs-string">If the sentiment is negative, apologize and suggest that \\</span><br><span class="hljs-string">they can reach out to customer service. </span><br><span class="hljs-string">Make sure to use specific details from the review.</span><br><span class="hljs-string">Write in a concise and professional tone.</span><br><span class="hljs-string">Sign the email as `AI customer agent`.</span><br><span class="hljs-string">Customer review: ```<span class="hljs-subst">&#123;review&#125;</span>```</span><br><span class="hljs-string">Review sentiment: <span class="hljs-subst">&#123;sentiment&#125;</span></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>response = get_completion(prompt, temperature=<span class="hljs-number">0.7</span>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><ul><li>Chatbot</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_completion</span>(<span class="hljs-params">prompt, model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span></span>):<br>    messages = [&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;]<br>    response = openai.ChatCompletion.create(<br>        model=model,<br>        messages=messages,<br>        temperature=<span class="hljs-number">0</span>, <span class="hljs-comment"># this is the degree of randomness of the model&#x27;s output</span><br>    )<br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&quot;content&quot;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_completion_from_messages</span>(<span class="hljs-params">messages, model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>, temperature=<span class="hljs-number">0</span></span>):<br>    response = openai.ChatCompletion.create(<br>        model=model,<br>        messages=messages,<br>        temperature=temperature, <span class="hljs-comment"># this is the degree of randomness of the model&#x27;s output</span><br>    )<br>    <span class="hljs-comment"># print(str(response.choices[0].message))</span><br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message[<span class="hljs-string">&quot;content&quot;</span>]<br>    <br>messages =  [  <br>&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&#x27;You are friendly chatbot.&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&#x27;Hi, my name is Isa&#x27;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;assistant&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>: <span class="hljs-string">&quot;Hi Isa! It&#x27;s nice to meet you. \\</span><br><span class="hljs-string">Is there anything I can help you with today?&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&#x27;Yes, you can remind me, What is my name?&#x27;</span>&#125;  ]<br>response = get_completion_from_messages(messages, temperature=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(response)<br><br><span class="hljs-comment"># OrderBot</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">collect_messages</span>(<span class="hljs-params">_</span>):<br>    prompt = inp.value_input<br>    inp.value = <span class="hljs-string">&#x27;&#x27;</span><br>    context.append(&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;prompt&#125;</span>&quot;</span>&#125;)<br>    response = get_completion_from_messages(context) <br>    context.append(&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;assistant&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;response&#125;</span>&quot;</span>&#125;)<br>    panels.append(<br>        pn.Row(<span class="hljs-string">&#x27;User:&#x27;</span>, pn.pane.Markdown(prompt, width=<span class="hljs-number">600</span>)))<br>    panels.append(<br>        pn.Row(<span class="hljs-string">&#x27;Assistant:&#x27;</span>, pn.pane.Markdown(response, width=<span class="hljs-number">600</span>, style=&#123;<span class="hljs-string">&#x27;background-color&#x27;</span>: <span class="hljs-string">&#x27;#F6F6F6&#x27;</span>&#125;)))<br> <br>    <span class="hljs-keyword">return</span> pn.Column(*panels)<br>    <br><span class="hljs-keyword">import</span> panel <span class="hljs-keyword">as</span> pn  <span class="hljs-comment"># GUI</span><br>pn.extension()<br><br>panels = [] <span class="hljs-comment"># collect display </span><br><br>context = [ &#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">You are OrderBot, an automated service to collect orders for a pizza restaurant. \\</span><br><span class="hljs-string">You first greet the customer, then collects the order, \\</span><br><span class="hljs-string">and then asks if it&#x27;s a pickup or delivery. \\</span><br><span class="hljs-string">You wait to collect the entire order, then summarize it and check for a final \\</span><br><span class="hljs-string">time if the customer wants to add anything else. \\</span><br><span class="hljs-string">If it&#x27;s a delivery, you ask for an address. \\</span><br><span class="hljs-string">Finally you collect the payment.\\</span><br><span class="hljs-string">Make sure to clarify all options, extras and sizes to uniquely \\</span><br><span class="hljs-string">identify the item from the menu.\\</span><br><span class="hljs-string">You respond in a short, very conversational friendly style. \\</span><br><span class="hljs-string">The menu includes \\</span><br><span class="hljs-string">pepperoni pizza  12.95, 10.00, 7.00 \\</span><br><span class="hljs-string">cheese pizza   10.95, 9.25, 6.50 \\</span><br><span class="hljs-string">eggplant pizza   11.95, 9.75, 6.75 \\</span><br><span class="hljs-string">fries 4.50, 3.50 \\</span><br><span class="hljs-string">greek salad 7.25 \\</span><br><span class="hljs-string">Toppings: \\</span><br><span class="hljs-string">extra cheese 2.00, \\</span><br><span class="hljs-string">mushrooms 1.50 \\</span><br><span class="hljs-string">sausage 3.00 \\</span><br><span class="hljs-string">canadian bacon 3.50 \\</span><br><span class="hljs-string">AI sauce 1.50 \\</span><br><span class="hljs-string">peppers 1.00 \\</span><br><span class="hljs-string">Drinks: \\</span><br><span class="hljs-string">coke 3.00, 2.00, 1.00 \\</span><br><span class="hljs-string">sprite 3.00, 2.00, 1.00 \\</span><br><span class="hljs-string">bottled water 5.00 \\</span><br><span class="hljs-string">&quot;&quot;&quot;</span>&#125; ]  <span class="hljs-comment"># accumulate messages</span><br><br>inp = pn.widgets.TextInput(value=<span class="hljs-string">&quot;Hi&quot;</span>, placeholder=<span class="hljs-string">&#x27;Enter text here…&#x27;</span>)<br>button_conversation = pn.widgets.Button(name=<span class="hljs-string">&quot;Chat!&quot;</span>)<br><br>interactive_conversation = pn.bind(collect_messages, button_conversation)<br><br>dashboard = pn.Column(<br>    inp,<br>    pn.Row(button_conversation),<br>    pn.panel(interactive_conversation, loading_indicator=<span class="hljs-literal">True</span>, height=<span class="hljs-number">300</span>),<br>)<br><br>dashboard<br>messages =  context.copy()<br>messages.append(<br>&#123;<span class="hljs-string">&#x27;role&#x27;</span>:<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&#x27;create a json summary of the previous food order. Itemize the price for each item\\</span><br><span class="hljs-string"> The fields should be 1) pizza, include size 2) list of toppings 3) list of drinks, include size   4) list of sides include size  5)total price &#x27;</span>&#125;,    <br>)<br> <span class="hljs-comment">#The fields should be 1) pizza, price 2) list of toppings 3) list of drinks, include size include price  4) list of sides include size include price, 5)total price &#x27;&#125;,    </span><br><br>response = get_completion_from_messages(messages, temperature=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytorch Distributed</title>
    <link href="/2024/01/21/Pytorch%20Distributed/"/>
    <url>/2024/01/21/Pytorch%20Distributed/</url>
    
    <content type="html"><![CDATA[<ul><li>nn.DataParallel</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><br>input_size = <span class="hljs-number">5</span><br>output_size = <span class="hljs-number">2</span><br>batch_size = <span class="hljs-number">30</span><br>data_size = <span class="hljs-number">100</span><br>device = torch.device(<span class="hljs-string">&#x27;cuda:0&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span>) <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size, length</span>):<br>        self.<span class="hljs-built_in">len</span> = length<br>        <span class="hljs-comment"># 100*5</span><br>        self.data = torch.randn(length, size)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-comment"># (5, )</span><br>        <span class="hljs-keyword">return</span> self.data[index]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 100</span><br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br><br>rand_loader = DataLoader(dataset=RandomDataset(input_size, data_size),<br>                         batch_size=batch_size, <br>                         shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(rand_loader)).shape  <span class="hljs-comment"># torch.Size([30, 5])</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_size, output_size</span>):<br>        <span class="hljs-comment"># 5 =&gt; 2</span><br>        <span class="hljs-built_in">super</span>(Model, self).__init__()<br>        self.fc = nn.Linear(input_size, output_size)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.fc(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\\tIn Model: input size&quot;</span>, <span class="hljs-built_in">input</span>.size(),  <span class="hljs-comment"># 每个进程都会print</span><br>              <span class="hljs-string">&quot;output size&quot;</span>, output.size())<br>        <span class="hljs-keyword">return</span> output<br>        <br>model = Model(input_size, output_size)<br><span class="hljs-keyword">if</span> torch.cuda.device_count() &gt; <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s use&quot;</span>, torch.cuda.device_count(), <span class="hljs-string">&quot;GPUs!&quot;</span>)<br>    <span class="hljs-comment"># dim = 0 [30, xxx] -&gt; [10, ...], [10, ...], [10, ...] on 3 GPUs</span><br>    model = nn.DataParallel(model)<br><span class="hljs-built_in">print</span>(model)<br><span class="hljs-comment"># DataParallel(</span><br><span class="hljs-comment">#   (module): Model(</span><br><span class="hljs-comment">#     (fc): Linear(in_features=5, out_features=2, bias=True)</span><br><span class="hljs-comment">#   )</span><br><span class="hljs-comment"># )</span><br><br><span class="hljs-comment"># tensor: to(device)</span><br>a = torch.randn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a.is_cuda&#x27;</span>, a.is_cuda)  <span class="hljs-comment"># False</span><br>b = a.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a.is_cuda&#x27;</span>, a.is_cuda)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b.is_cuda&#x27;</span>, b.is_cuda)  <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># model: to(device)</span><br>a = Model(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a.parameters()).is_cuda)  <span class="hljs-comment"># False</span><br>b = a.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a.parameters()).is_cuda)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(b.parameters()).is_cuda)  <span class="hljs-comment"># True</span><br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> rand_loader:<br>    <span class="hljs-built_in">input</span> = data.to(device)<br>    output = model(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Outside: input size&quot;</span>, <span class="hljs-built_in">input</span>.size(),<br>          <span class="hljs-string">&quot;output_size&quot;</span>, output.size())<br>          <br><span class="hljs-comment"># In Model: input size torch.Size([15, 5]) output size torch.Size([15, 2])</span><br><span class="hljs-comment"># In Model: input size torch.Size([15, 5]) output size torch.Size([15, 2])</span><br><span class="hljs-comment"># Outside: input size torch.Size([30, 5]) output_size torch.Size([30, 2])</span><br><span class="hljs-comment"># In Model: input size torch.Size([15, 5]) output size torch.Size([15, 2])</span><br><span class="hljs-comment"># In Model: input size torch.Size([15, 5]) output size torch.Size([15, 2])</span><br><span class="hljs-comment"># Outside: input size torch.Size([30, 5]) output_size torch.Size([30, 2])</span><br></code></pre></td></tr></table></figure><ul><li>分布式数据并行时，模型（model parameters）/优化器（optimizerstates）每张卡都会拷贝一份（replicas）<ul><li>DDP始终在卡间维持着模型参数和优化器状态的同步一致性在整个训练过程中</li></ul></li><li>Data Parallel，batch input，通过 <strong>DistributedSampler</strong>split &amp; 分发到不同的 gpus 上<ul><li>此时虽然模型/optimizer 相同，但因为数据输入不同，导致 loss不同，反向传播时计算到的梯度也会不同</li><li>此时 ddp 如何保证卡间，model/optimizer 的同步一致性呢<ul><li>ring all-reduce algorithm其同步过程不需要等待所有的卡都计算完成一轮梯度</li></ul></li></ul></li><li>world，world_size：<ul><li>world：as a group containing all the processes for your distributedtraining.<ul><li>通常，每一个 gpu 代表一个进程（process）</li><li>world 内的 process 可以彼此通信，所以有 ddp 分布式训练的；</li></ul></li></ul></li><li>rank<ul><li>rank: is the unique ID given to a process, 进程级别的概念，rank是为了标识、识别进程，因为进程间（process）需要通信；</li><li>local rank：is the a unique local ID for processes running in asingle node</li></ul></li><li>node 理解为一个server，2个servers（多机，机器之间需要通信）就是2个nodes<ul><li>比如每个 node/server/machine 各有4张卡（4 gpus），一个 2个node/server；</li><li>world_size: 2*4 == 8</li><li>ranks: [0, 1, 2, 3, 4, 5, 6, 7]</li><li>local_rank: [0, 1, 2, 3], [0, 1, 2, 3]</li></ul></li><li>An example for setup</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ddp_setup</span>(<span class="hljs-params">rank, world_size</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        rank: Unique identifier of each process</span><br><span class="hljs-string">        world_size: Total number of processes</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    os.environ[<span class="hljs-string">&quot;MASTER_ADDR&quot;</span>] = <span class="hljs-string">&quot;localhost&quot;</span><br>    os.environ[<span class="hljs-string">&quot;MASTER_PORT&quot;</span>] = <span class="hljs-string">&quot;12355&quot;</span><br>    init_process_group(backend=<span class="hljs-string">&quot;nccl&quot;</span>, rank=rank, world_size=world_size)<br>    torch.cuda.set_device(rank)<br>    <br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> torch.distributed.is_initialized():<br>    torch.distributed.init_process_group(<span class="hljs-string">&quot;nccl&quot;</span>)<br><span class="hljs-comment"># torchrun --nproc_per_node 的参数</span><br>model_parallel_size = <span class="hljs-built_in">int</span>(os.environ.get(<span class="hljs-string">&quot;WORLD_SIZE&quot;</span>, <span class="hljs-number">1</span>))<br>local_rank = <span class="hljs-built_in">int</span>(os.environ.get(<span class="hljs-string">&quot;LOCAL_RANK&quot;</span>, <span class="hljs-number">0</span>))<br>torch.cuda.set_device(local_rank)<br></code></pre></td></tr></table></figure><ul><li>nn.parallel.DistributedDataParallel</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-comment"># custom trainer</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trainer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, </span><br><span class="hljs-params">                 model: torch.nn.Module, </span><br><span class="hljs-params">                 train_dataloader: DataLoader, </span><br><span class="hljs-params">                 optimizer: torch.optim.Optimizer, </span><br><span class="hljs-params">                 gpu_id: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># rank</span><br>        self.gpu_id = gpu_id<br>        self.model = model.to(gpu_id)<br>        self.train_dataloader = train_dataloader<br>        self.optimizer = optimizer<br>        self.model = DDP(model, device_ids=[gpu_id])<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_run_batch</span>(<span class="hljs-params">self, xs, ys</span>):<br>        self.optimizer.zero_grad()<br>        output = self.model(xs)<br>        loss = F.cross_entropy(output, ys)<br>        loss.backward()<br>        self.optimizer.step()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_run_epoch</span>(<span class="hljs-params">self, epoch</span>):<br>        batch_size = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(self.train_dataloader))[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;[GPU: <span class="hljs-subst">&#123;self.gpu_id&#125;</span>] Epoch: <span class="hljs-subst">&#123;epoch&#125;</span> | Batchsize: <span class="hljs-subst">&#123;batch_size&#125;</span> | Steps: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(self.train_dataloader)&#125;</span>&#x27;</span>)<br>        self.train_dataloader.sampler.set_epoch(epoch)<br>        <span class="hljs-keyword">for</span> xs, ys <span class="hljs-keyword">in</span> self.train_dataloader:<br>            xs = xs.to(self.gpu_id)<br>            ys = ys.to(self.gpu_id)<br>            self._run_batch(xs, ys)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, max_epoch: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_epoch):<br>            self._run_epoch(epoch)<br>    <br><span class="hljs-comment"># custom dataset</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTrainDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size</span>):<br>        self.size = size<br>        self.data = [(torch.rand(<span class="hljs-number">20</span>), torch.rand(<span class="hljs-number">1</span>)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size)]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.size<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">return</span> self.data[index]<br>train_dataset = MyTrainDataset(<span class="hljs-number">2048</span>)<br>train_dataset[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># (tensor([0.4790, 0.5080, 0.1934, 0.5247, 0.6372, 0.9930, 0.2379, 0.9182, 0.3659,</span><br><span class="hljs-comment">#          0.8408, 0.2347, 0.1770, 0.8691, 0.2810, 0.2156, 0.8289, 0.9372, 0.6358,</span><br><span class="hljs-comment">#          0.4338, 0.2754]),</span><br><span class="hljs-comment">#  tensor([0.6307]))</span><br><br><span class="hljs-keyword">import</span> torch.multiprocessing <span class="hljs-keyword">as</span> mp<br><span class="hljs-keyword">from</span> torch.utils.data.distributed <span class="hljs-keyword">import</span> DistributedSampler<br><span class="hljs-keyword">from</span> torch.nn.parallel <span class="hljs-keyword">import</span> DistributedDataParallel <span class="hljs-keyword">as</span> DDP<br><span class="hljs-keyword">from</span> torch.distributed <span class="hljs-keyword">import</span> init_process_group, destroy_process_group<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">rank: <span class="hljs-built_in">int</span>, world_size: <span class="hljs-built_in">int</span>, max_epochs: <span class="hljs-built_in">int</span>, batch_size: <span class="hljs-built_in">int</span></span>):<br>    ddp_setup(rank, world_size)<br>    train_dataset = MyTrainDataset(<span class="hljs-number">2048</span>)<br>    train_dataloader = DataLoader(train_dataset, <br>                              batch_size=batch_size, <br>                              pin_memory=<span class="hljs-literal">True</span>, <br>                              shuffle=<span class="hljs-literal">False</span>, <br>                              <span class="hljs-comment"># batch input: split to each gpus (各个 gpu 之间没有 overlaping samples)</span><br>                              sampler=DistributedSampler(train_dataset))<br>    model = torch.nn.Linear(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>)<br>    optimzer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">1e-3</span>)<br>    trainer = Trainer(model=model, gpu_id=rank, optimizer=optimzer, train_dataloader=train_dataloader)<br>    trainer.train(max_epochs)<br>    destroy_process_group()<br>world_size = torch.cuda.device_count()<br><span class="hljs-comment"># 直接运行</span><br>!python ddp_gpus.py --max_epochs <span class="hljs-number">5</span> --batch_size <span class="hljs-number">32</span>  <span class="hljs-comment"># 多卡</span><br><span class="hljs-comment"># 区别:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ddp_setup</span>(<span class="hljs-params">rank, world_size</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        rank: Unique identifier of each process</span><br><span class="hljs-string">        world_size: Total number of processes</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># rank 0 process</span><br>    os.environ[<span class="hljs-string">&quot;MASTER_ADDR&quot;</span>] = <span class="hljs-string">&quot;localhost&quot;</span><br>    os.environ[<span class="hljs-string">&quot;MASTER_PORT&quot;</span>] = <span class="hljs-string">&quot;12355&quot;</span><br>    <span class="hljs-comment"># nccl：NVIDIA Collective Communication Library </span><br>    <span class="hljs-comment"># 分布式情况下的，gpus 间通信</span><br>    init_process_group(backend=<span class="hljs-string">&quot;nccl&quot;</span>, rank=rank, world_size=world_size)<br>    torch.cuda.set_device(rank)<br> <br>world_size = torch.cuda.device_count()<br>mp.spawn(main, args=(world_size, args.max_epochs, args.batch_size), nprocs=world_size)<br><br><span class="hljs-comment"># &lt;https://github.com/chunhuizhang/pytorch_distribute_tutorials/blob/main/tutorials/ddp_gpus.py&gt;</span><br><br><span class="hljs-comment"># torchrun运行</span><br>!torchrun ddp_gpus_torchrun.py --max_epochs <span class="hljs-number">5</span> --batch_size <span class="hljs-number">32</span>  <span class="hljs-comment"># 单卡</span><br>!torchrun --nproc-per-node=<span class="hljs-number">2</span> ddp_gpus_torchrun.py --max_epochs <span class="hljs-number">5</span> --batch_size <span class="hljs-number">32</span>  <span class="hljs-comment"># 多卡</span><br>!python -m torch.distributed.launch --use-env --nproc-per-node=<span class="hljs-number">2</span> ddp_gpus_torchrun.py --max_epochs <span class="hljs-number">5</span> --batch_size <span class="hljs-number">32</span>  <span class="hljs-comment"># 多卡, 与上行等价</span><br><span class="hljs-comment"># 区别</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ddp_setup</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        rank: Unique identifier of each process</span><br><span class="hljs-string">        world_size: Total number of processes</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># rank 0 process</span><br>    <span class="hljs-comment"># os.environ[&quot;MASTER_ADDR&quot;] = &quot;localhost&quot;</span><br>    <span class="hljs-comment"># os.environ[&quot;MASTER_PORT&quot;] = &quot;12355&quot;</span><br>    <span class="hljs-comment"># nccl：NVIDIA Collective Communication Library </span><br>    <span class="hljs-comment"># 分布式情况下的，gpus 间通信</span><br>    init_process_group(backend=<span class="hljs-string">&quot;nccl&quot;</span>)<br>    torch.cuda.set_device(<span class="hljs-built_in">int</span>(os.environ[<span class="hljs-string">&#x27;LOCAL_RANK&#x27;</span>]))<br>    <br><span class="hljs-comment"># world_size = torch.cuda.device_count()</span><br>main(args.max_epochs, args.batch_size)<br><br><span class="hljs-comment"># &lt;https://github.com/chunhuizhang/pytorch_distribute_tutorials/blob/main/tutorials/ddp_gpus_torchrun.py&gt;</span><br></code></pre></td></tr></table></figure><ul><li>model parallel</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LlamaTokenizer, LlamaForCausalLM, GenerationConfig<br>model = LlamaForCausalLM.from_pretrained(<span class="hljs-string">&quot;decapoda-research/llama-7b-hf&quot;</span>,<br>    load_in_8bit=<span class="hljs-literal">True</span>,<br>    device_map=<span class="hljs-string">&quot;auto&quot;</span>,  <span class="hljs-comment"># &quot;auto&quot;, &quot;balanced&quot;, &quot;balanced_low_0&quot;, &quot;sequential&quot;</span><br>)                       <span class="hljs-comment"># GPU(s) &gt; CPU (RAM) &gt; Disk</span><br><span class="hljs-keyword">for</span> i, para <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(model.named_parameters()):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>, \\t <span class="hljs-subst">&#123;para[<span class="hljs-number">1</span>].device&#125;</span> \\t<span class="hljs-subst">&#123;para[<span class="hljs-number">1</span>].dtype&#125;</span>&#x27;</span>)<br>    <br><span class="hljs-comment"># An example on ToyModel</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToyModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(ToyModel, self).__init__()<br>        self.net1 = torch.nn.Linear(<span class="hljs-number">10000</span>, <span class="hljs-number">10</span>).to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br>        self.relu = torch.nn.ReLU()<br>        self.net2 = torch.nn.Linear(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>).to(<span class="hljs-string">&#x27;cuda:1&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.relu(self.net1(x.to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)))<br>        <span class="hljs-keyword">return</span> self.net2(x.to(<span class="hljs-string">&#x27;cuda:1&#x27;</span>))<br><br>model = ToyModel()<br>loss_fn = nn.MSELoss()<br>optimizer = optim.SGD(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br>optimizer.zero_grad()<br>outputs = model(torch.randn(<span class="hljs-number">20</span>, <span class="hljs-number">10000</span>))<br>labels = torch.randn(<span class="hljs-number">20</span>, <span class="hljs-number">5</span>).to(<span class="hljs-string">&#x27;cuda:1&#x27;</span>)<br>loss_fn(outputs, labels).backward()<br>optimizer.step()<br><br><span class="hljs-comment"># An example on ResNet</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torchvision.models.resnet <span class="hljs-keyword">import</span> ResNet, Bottleneck<br><span class="hljs-comment"># from torchvision.models.resnet import resnet18, resnet34, resnet50, resnet101, resnet152</span><br>model = ResNet(Bottleneck, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>])  <span class="hljs-comment"># resnet50</span><br><span class="hljs-keyword">from</span> torchsummary <span class="hljs-keyword">import</span> summary<br>summary(model, input_size=(<span class="hljs-number">3</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>), device=<span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelParallelResNet50</span>(<span class="hljs-title class_ inherited__">ResNet</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_classes=<span class="hljs-number">1000</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(Bottleneck, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>], num_classes=num_classes)<br>        <span class="hljs-comment"># conv1 =&gt; bn1 =&gt; relu =&gt; maxpool =&gt; layer1-layer4 =&gt; avgpool =&gt; fc</span><br>        self.seq1 = nn.Sequential(<br>            self.conv1,<br>            self.bn1,<br>            self.relu,<br>            self.maxpool,<br>            self.layer1, <br>            self.layer2<br>        ).to(<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br>        <br>        self.seq2 = nn.Sequential(<br>            self.layer3, <br>            self.layer4,<br>            self.avgpool,<br>        ).to(<span class="hljs-string">&#x27;cuda:1&#x27;</span>)<br>        <br>        self.fc.to(<span class="hljs-string">&#x27;cuda:1&#x27;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.seq2(self.seq1(x).to(<span class="hljs-string">&#x27;cuda:1&#x27;</span>))<br>        <span class="hljs-keyword">return</span> self.fc(x.view(x.size(<span class="hljs-number">0</span>), -<span class="hljs-number">1</span>))<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">model_size</span>(<span class="hljs-params">model</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([para.numel() <span class="hljs-keyword">for</span> para <span class="hljs-keyword">in</span> model.parameters()])<br><br>one_hot_indices = torch.LongTensor(<span class="hljs-number">5</span>) \\<br>                           .random_(<span class="hljs-number">0</span>, num_classes) \\<br>                           .view(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>)<br>labels = torch.zeros(<span class="hljs-number">5</span>, num_classes) \\<br>                      .scatter_(<span class="hljs-number">1</span>, one_hot_indices, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>DDP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLM Basics</title>
    <link href="/2024/01/10/LLM%20Basics/"/>
    <url>/2024/01/10/LLM%20Basics/</url>
    
    <content type="html"><![CDATA[<ul><li>基本配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">!pip install -q bitsandbytes datasets accelerate loralib<br>!pip install -q git+https://github.com/huggingface/transformers.git@main  <span class="hljs-comment"># 源码安装</span><br>!pip install -q git+https://github.com/huggingface/peft.git<br><br>AutoConfig.from_pretrained(<span class="hljs-string">&quot;bigscience/bloom-7b1&quot;</span>)<br>AutoConfig  <span class="hljs-comment"># 查看模型配置</span><br><br><span class="hljs-built_in">list</span>(model.parameters())[<span class="hljs-number">0</span>].dtype  <span class="hljs-comment"># 查看模型参数类型</span><br><br><span class="hljs-keyword">for</span> i, param <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(model.parameters()):<br>    param.requires_grad = <span class="hljs-literal">False</span>  <span class="hljs-comment"># freeze the model - train adapters later</span><br>    <span class="hljs-keyword">if</span> param.ndim == <span class="hljs-number">1</span>:<br>        <span class="hljs-comment"># cast the small parameters (e.g. layernorm) to fp32 for stability</span><br>        param.data = param.data.to(torch.float32)  <span class="hljs-comment"># 增加精度, 训练更稳定</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CastOutputToFloat</span>(nn.Sequential):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>): <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().forward(x).to(torch.float32)<br>model.lm_head = CastOutputToFloat(model.lm_head)  <span class="hljs-comment"># 增加精度, 训练更稳定</span><br><br>model.gradient_checkpointing_enable()  <span class="hljs-comment"># 减少内存使用</span><br>model.enable_input_require_grads()  <span class="hljs-comment"># 会计算模型输入的梯度</span><br><br><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> LoraConfig, get_peft_model <br>config = LoraConfig(<br>    r=<span class="hljs-number">16</span>, <span class="hljs-comment">#low rank</span><br>    lora_alpha=<span class="hljs-number">32</span>,<br>    <span class="hljs-comment"># target_modules=[&quot;q_proj&quot;, &quot;v_proj&quot;],  # if you know</span><br>    lora_dropout=<span class="hljs-number">0.05</span>,<br>    bias=<span class="hljs-string">&quot;none&quot;</span>,<br>    task_type=<span class="hljs-string">&quot;CAUSAL_LM&quot;</span>  <span class="hljs-comment"># set this for CLM or Seq2Seq</span><br>)<br></code></pre></td></tr></table></figure><ul><li>数据处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>dataset = load_dataset(<span class="hljs-string">&quot;Abirate/english_quotes&quot;</span>)<br><br>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].to_pandas()  <span class="hljs-comment"># 转成panda格式</span><br>dataset[<span class="hljs-string">&#x27;train&#x27;</span>][<span class="hljs-string">&#x27;author&#x27;</span>][:<span class="hljs-number">4</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">row</span>):<br>    row[<span class="hljs-string">&#x27;prediction&#x27;</span>] = row[<span class="hljs-string">&#x27;quote&#x27;</span>] + <span class="hljs-string">&#x27; -&gt;: &#x27;</span> + <span class="hljs-built_in">str</span>(row[<span class="hljs-string">&#x27;tags&#x27;</span>])<br>    <span class="hljs-keyword">return</span> row<br>dataset[<span class="hljs-string">&#x27;train&#x27;</span>] = dataset[<span class="hljs-string">&#x27;train&#x27;</span>].<span class="hljs-built_in">map</span>(merge)  <span class="hljs-comment"># 构建新行</span><br><br>tokenizer(dataset[<span class="hljs-string">&#x27;train&#x27;</span>][<span class="hljs-string">&#x27;prediction&#x27;</span>][:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 返回值为input_ids和attention_mask</span><br><br>dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> samples: tokenizer(samples[<span class="hljs-string">&#x27;prediction&#x27;</span>]), batched=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 由&#x27;prediction&#x27;得到新行&#x27;input_ids&#x27;和&#x27;attention_mask&#x27;</span><br><br><span class="hljs-comment"># nvitop</span><br><br>batch = tokenizer(<span class="hljs-string">&quot;“Training models with PEFT and LoRa is cool” -&gt;: &quot;</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)<br><span class="hljs-keyword">with</span> torch.cuda.amp.autocast():<br>    output_tokens = model.generate(**batch, max_new_tokens=<span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\\n\\n&#x27;</span>, tokenizer.decode(output_tokens[<span class="hljs-number">0</span>], skip_special_tokens=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><ul><li>混合精度; 不同的layer可以放在不同的device</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import os</span><br><span class="hljs-comment"># os.environ[&#x27;HTTP_PROXY&#x27;] = &#x27;&lt;http://127.0.0.1:7890&gt;&#x27;</span><br><span class="hljs-comment"># os.environ[&#x27;HTTPS_PROXY&#x27;] = &#x27;&lt;http://127.0.0.1:7890&gt;&#x27;</span><br><br><span class="hljs-comment"># https 协议</span><br>!pip install -q git+https://github.com/huggingface/transformers.git<br><span class="hljs-comment"># ssh 协议</span><br>!pip install -q git+ssh://git@github.com/huggingface/transformers.git<br><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> LlamaTokenizer, LlamaForCausalLM, GenerationConfig<br>model = LlamaForCausalLM.from_pretrained(<span class="hljs-string">&quot;decapoda-research/llama-7b-hf&quot;</span>,<br>    load_in_8bit=<span class="hljs-literal">True</span>,  <span class="hljs-comment"># 混合精度</span><br>    device_map=<span class="hljs-string">&quot;auto&quot;</span>,  <span class="hljs-comment"># 不同的layer可以放在不同的device</span><br>)<br>tokenizer = LlamaTokenizer.from_pretrained(<span class="hljs-string">&quot;decapoda-research/llama-7b-hf&quot;</span>)<br><br><span class="hljs-keyword">for</span> i, para <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(model.named_parameters()):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>, \\t <span class="hljs-subst">&#123;para[<span class="hljs-number">1</span>].device&#125;</span> \\t<span class="hljs-subst">&#123;para[<span class="hljs-number">1</span>].dtype&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 查看parameters的精度及其所在的device</span><br><br><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> PeftModel<br>model = PeftModel.from_pretrained(model, <span class="hljs-string">&quot;tloen/alpaca-lora-7b&quot;</span>)<br><br><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> mapping<br><span class="hljs-keyword">from</span> peft.utils <span class="hljs-keyword">import</span> other<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;model_type&#x27;</span>, model.config.model_type)<br><span class="hljs-built_in">print</span>(model.peft_config[<span class="hljs-string">&#x27;default&#x27;</span>].target_modules)<br>other.TRANSFORMERS_MODELS_TO_LORA_TARGET_MODULES_MAPPING  <span class="hljs-comment"># 查看默认的target module</span><br></code></pre></td></tr></table></figure><ul><li>一个alpaca inference的example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_prompt</span>(<span class="hljs-params">instruction, <span class="hljs-built_in">input</span>=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">input</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;&quot;&quot;Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.</span><br><span class="hljs-string"></span><br><span class="hljs-string">### Instruction:</span><br><span class="hljs-string"><span class="hljs-subst">&#123;instruction&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">### Input:</span><br><span class="hljs-string"><span class="hljs-subst">&#123;<span class="hljs-built_in">input</span>&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">### Response:&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;&quot;&quot;Below is an instruction that describes a task. Write a response that appropriately completes the request.</span><br><span class="hljs-string"></span><br><span class="hljs-string">### Instruction:</span><br><span class="hljs-string"><span class="hljs-subst">&#123;instruction&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">### Response:&quot;&quot;&quot;</span><br><br>generation_config = GenerationConfig(<br>    temperature=<span class="hljs-number">1.5</span>,<br>    <span class="hljs-comment"># nucleus sampling</span><br>    top_p=<span class="hljs-number">0.8</span>,<br>    num_beams=<span class="hljs-number">4</span>,<br>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inference</span>(<span class="hljs-params">instruction, <span class="hljs-built_in">input</span>=<span class="hljs-literal">None</span></span>):<br>    prompt = generate_prompt(instruction, <span class="hljs-built_in">input</span>)<br>    inputs = tokenizer(prompt, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>    input_ids = inputs[<span class="hljs-string">&quot;input_ids&quot;</span>].cuda()<br>    generation_output = model.generate(  <span class="hljs-comment"># model.generate输出的仍是编码</span><br>        input_ids=input_ids,             <span class="hljs-comment"># 需要通过tokenizer.decode解码</span><br>        generation_config=generation_config,<br>        return_dict_in_generate=<span class="hljs-literal">True</span>,<br>        output_scores=<span class="hljs-literal">True</span>,<br>        max_new_tokens=<span class="hljs-number">256</span><br>    )<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> generation_output.sequences:<br>        output = tokenizer.decode(s)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Response:&quot;</span>, output.split(<span class="hljs-string">&quot;### Response:&quot;</span>)[<span class="hljs-number">1</span>].strip())<br><br>inference(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Instruction: &quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>torch.cuda.amp的使用: 通过loss scale来提升最大的batch size</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Simple CNN</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CNN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels=<span class="hljs-number">1</span>, num_classes=<span class="hljs-number">10</span></span>):<br>        <span class="hljs-built_in">super</span>(CNN, self).__init__()<br>        self.conv1 = nn.Conv2d(<br>            in_channels=in_channels,<br>            out_channels=<span class="hljs-number">5120</span>,<br>            kernel_size=<span class="hljs-number">3</span>,<br>            stride=<span class="hljs-number">1</span>,<br>            padding=<span class="hljs-number">1</span>,<br>        )<br>        <span class="hljs-comment"># /2, downsampling</span><br>        self.pool = nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br>        self.conv2 = nn.Conv2d(<br>            in_channels=<span class="hljs-number">5120</span>,<br>            out_channels=<span class="hljs-number">10240</span>,<br>            kernel_size=<span class="hljs-number">3</span>,<br>            stride=<span class="hljs-number">1</span>,<br>            padding=<span class="hljs-number">1</span>,<br>        )<br>        <span class="hljs-comment"># (channels*w*h)</span><br>            <span class="hljs-comment"># w, h: 取决于初始的 width, height</span><br>        self.fc1 = nn.Linear(<span class="hljs-number">10240</span> * <span class="hljs-number">7</span> * <span class="hljs-number">7</span>, num_classes)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = F.relu(self.conv1(x))<br>        <span class="hljs-comment"># /2</span><br>        x = self.pool(x)<br>        x = F.relu(self.conv2(x))<br>        <span class="hljs-comment"># /2</span><br>        x = self.pool(x)<br>        <span class="hljs-comment"># 4d =&gt; 2d, (bs, features)</span><br>        x = x.reshape(x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>)<br>        x = self.fc1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">from</span> torchsummary <span class="hljs-keyword">import</span> summary<br>model = CNN(in_channels=<span class="hljs-number">3</span>)<br>summary(model, input_size=(<span class="hljs-number">3</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>), batch_size=<span class="hljs-number">32</span>, device=<span class="hljs-string">&#x27;cpu&#x27;</span>)  <span class="hljs-comment"># 显示经过不同layer后shape的变化</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>():<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(num_epochs)):<br>        <span class="hljs-keyword">for</span> batch_idx, (batch_x, batch_y) <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">enumerate</span>(train_loader)):<br>            batch_x = batch_x.to(device)<br>            batch_y = batch_y.to(device)<br>            <br>            <span class="hljs-comment"># forward</span><br>            <span class="hljs-comment"># logits = model(batch_x)</span><br>            <span class="hljs-comment"># loss = criterion(logits, batch_y)</span><br>            <span class="hljs-keyword">with</span> torch.cuda.amp.autocast():<br>                logits = model(batch_x)<br>                loss = criterion(logits, batch_y)            <br><br>            <span class="hljs-comment"># backward</span><br>            optimizer.zero_grad()<br>            <span class="hljs-comment"># loss.backward()</span><br>            scaler.scale(loss).backward()<br>            <br>            <span class="hljs-comment"># gradient descent</span><br>            <span class="hljs-comment"># optimizer.step()</span><br>            scaler.step(optimizer)<br>            scaler.update()<br></code></pre></td></tr></table></figure><ul><li>一个model.generate的example</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pip install bitsandbytes</span><br><span class="hljs-comment"># pip install transformers</span><br><span class="hljs-comment"># pip install accelerate</span><br><br>MAX_NEW_TOKENS = <span class="hljs-number">128</span><br>ckpt = <span class="hljs-string">&#x27;facebook/opt-6.7b&#x27;</span><br>sample = <span class="hljs-string">&#x27;hello, who are you?&#x27;</span><br>tokenizer = AutoTokenizer.from_pretrained(ckpt)<br>input_ids = tokenizer(sample, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>).input_ids<br><br>model = AutoModelForCausalLM.from_pretrained(ckpt, device_map=<span class="hljs-string">&#x27;auto&#x27;</span>, load_in_8bit=<span class="hljs-literal">True</span>)<br>generated_ids = model.generate(input_ids, max_length=MAX_NEW_TOKENS)<br>tokenizer.decode(generated_ids[<span class="hljs-number">0</span>], skip_special_tokens=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><ul><li>tokenizer的基本接口; 如何训练tokenizer</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br>tokenizer_t5 = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;t5-base&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_str</span>(<span class="hljs-params">tokenizer, text</span>):  <span class="hljs-comment"># 返回编码再解码后的list, 可以查看常见词是否被再切分</span><br>    input_ids = tokenizer(text, add_special_tokens=<span class="hljs-literal">False</span>)[<span class="hljs-string">&#x27;input_ids&#x27;</span>]<br>    <span class="hljs-keyword">return</span> [tokenizer.decode(token_id) <span class="hljs-keyword">for</span> token_id <span class="hljs-keyword">in</span> input_ids]<br><br>python_code = <span class="hljs-string">r&#x27;&#x27;&#x27;def say_hello():</span><br><span class="hljs-string">    print(&#x27;Hello, World!&#x27;)</span><br><span class="hljs-string">    </span><br><span class="hljs-string"># print hello</span><br><span class="hljs-string">say_hello()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;gpt2&#x27;</span>)<br><span class="hljs-built_in">print</span>(tokenizer(python_code)[<span class="hljs-string">&#x27;input_ids&#x27;</span>])<br><span class="hljs-built_in">print</span>(tokenizer(python_code).tokens())  <span class="hljs-comment"># 查看切分得到的tokens</span><br><br>tokenizer.backend_tokenizer.normalizer<br>tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(python_code)<br><br><span class="hljs-comment"># Unicode character composed of 1-4 bytes</span><br>a, e = <span class="hljs-string">u&#x27;a&#x27;</span>, <span class="hljs-string">u&#x27;€&#x27;</span><br><span class="hljs-comment"># 1 bytes</span><br>byte = <span class="hljs-built_in">ord</span>(a.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span>, <span class="hljs-subst">&#123;a.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;</span>, <span class="hljs-subst">&#123;byte&#125;</span>&quot;</span>)<br><span class="hljs-comment"># 3 bytes</span><br><span class="hljs-comment"># byte = ord(e.encode(&#x27;utf-8&#x27;))</span><br><span class="hljs-comment"># ord 接受的是一个char</span><br><span class="hljs-comment"># ord: 字符转整数; 整数转字符</span><br>byte = [<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">chr</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;e&#125;</span>, <span class="hljs-subst">&#123;e.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;</span>, <span class="hljs-subst">&#123;byte&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># training a tokenizer</span><br><span class="hljs-comment"># 不涉及权重或者反向传播</span><br><span class="hljs-comment"># tokenizer 的 processing pipeline</span><br><span class="hljs-comment"># normalization</span><br><span class="hljs-comment"># pretokenization</span><br><span class="hljs-comment"># tokenizer model</span><br><span class="hljs-comment"># postprocesssing</span><br><span class="hljs-comment"># subword tokenization algorithms (subword: tokens are part of words)</span><br><span class="hljs-comment"># BPE: byte pair encoding</span><br><span class="hljs-comment"># 迭代式地添加策略，直到一个 target vocabulary size</span><br><span class="hljs-comment"># word piece</span><br><span class="hljs-comment"># unigram</span><br><span class="hljs-comment"># 迭代式地删除策略，直到一个 target vocabulary size</span><br></code></pre></td></tr></table></figure><figure><imgsrc="https://prod-files-secure.s3.us-west-2.amazonaws.com/f8430f06-3f4a-4ba4-994a-af512bbc3929/6e742602-a09b-41c5-8ccb-867da64b0dad/Untitled.png"alt="Untitled" /><figcaption aria-hidden="true">Untitled</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers.models.gpt2.tokenization_gpt2 <span class="hljs-keyword">import</span> bytes_to_unicode<br>bytes_to_unicode_map = bytes_to_unicode()<br>bytes_to_unicode_map<br><br>unicode_to_bytes_map = <span class="hljs-built_in">dict</span>((v, k) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> bytes_to_unicode_map.items())<br>unicode_to_bytes_map<br><br>base_vocab = <span class="hljs-built_in">list</span>(unicode_to_bytes_map.keys())<br><span class="hljs-built_in">print</span>(base_vocab[<span class="hljs-number">0</span>], base_vocab[-<span class="hljs-number">1</span>])<br><br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;gpt2&#x27;</span>)<br>tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(python_code)<br>tokens = <span class="hljs-built_in">sorted</span>(tokenizer.vocab.items(), key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(x[<span class="hljs-number">0</span>]), reverse=<span class="hljs-literal">True</span>)<br>[tokenizer.convert_tokens_to_string([token]) <span class="hljs-keyword">for</span> token, _ <span class="hljs-keyword">in</span> tokens[:<span class="hljs-number">10</span>]]<br>tokens = <span class="hljs-built_in">sorted</span>(tokenizer.vocab.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>[tokenizer.convert_tokens_to_string([token]) <span class="hljs-keyword">for</span> token, _ <span class="hljs-keyword">in</span> tokens[:<span class="hljs-number">12</span>]]<br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th>Description</th><th>Character</th><th>Bytes</th><th>Mapped bytes</th></tr></thead><tbody><tr class="odd"><td>Regular characters</td><td>a and ?</td><td>97 and 63</td><td>a and ?</td></tr><tr class="even"><td>A nonprintable control character (carriage return)</td><td>U+000D</td><td>13</td><td>č</td></tr><tr class="odd"><td>A space</td><td></td><td>32</td><td>Ġ</td></tr><tr class="even"><td>A nonbreakable space</td><td></td><td>160</td><td>ł</td></tr><tr class="odd"><td>A newline character</td><td></td><td>10</td><td>Ċ</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># training a tokenizer</span><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br><br>dataset = load_dataset(<span class="hljs-string">&#x27;./codeparrot/&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)<br>iter_dataset = <span class="hljs-built_in">iter</span>(dataset)<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;gpt2&#x27;</span>)<br><br><span class="hljs-keyword">from</span> transformers.models.gpt2.tokenization_gpt2 <span class="hljs-keyword">import</span> bytes_to_unicode<br>bytes_to_unicode_map = bytes_to_unicode()<br>unicode_to_bytes_map = <span class="hljs-built_in">dict</span>((v, k) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> bytes_to_unicode_map.items())<br>base_vocab = <span class="hljs-built_in">list</span>(unicode_to_bytes_map.keys())<br><br>length = <span class="hljs-number">100000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">batch_iterator</span>(<span class="hljs-params">batch_size=<span class="hljs-number">1000</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length, batch_size)):<br>        <span class="hljs-keyword">yield</span> [<span class="hljs-built_in">next</span>(iter_dataset)[<span class="hljs-string">&#x27;content&#x27;</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size)]<br><br>new_tokenizer = tokenizer.train_new_from_iterator(batch_iterator(), <br>                                                  vocab_size=<span class="hljs-number">12500</span>, <br>                                                  initial_alphabet=base_vocab)<br><br>tokens = <span class="hljs-built_in">sorted</span>(new_tokenizer.vocab.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">False</span>)<br>[(t, new_tokenizer.convert_tokens_to_string([t])) <span class="hljs-keyword">for</span> t, _ <span class="hljs-keyword">in</span> tokens[<span class="hljs-number">257</span>:<span class="hljs-number">280</span>]]  <span class="hljs-comment"># 查看tokens</span><br><br><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">len</span>(keyword.kwlist)<br><span class="hljs-keyword">for</span> kw <span class="hljs-keyword">in</span> keyword.kwlist:  <span class="hljs-comment"># 查看哪些词还不在vocab中</span><br>    <span class="hljs-keyword">if</span> kw <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> new_tokenizer.vocab:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;`<span class="hljs-subst">&#123;kw&#125;</span>` not in the new tokenizer&#x27;</span>)<br><br><span class="hljs-comment"># 上传到huggingface</span><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&#x27;HTTP_PROXY&#x27;</span>] = <span class="hljs-string">&#x27;&lt;http://127.0.0.1:7890&gt;&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;HTTPS_PROXY&#x27;</span>] = <span class="hljs-string">&#x27;&lt;http://127.0.0.1:7890&gt;&#x27;</span><br>ckpt = <span class="hljs-string">&#x27;asdfgh&#x27;</span><br>org = <span class="hljs-string">&#x27;asdfghjkl&#x27;</span><br>new_tokenizer.push_to_hub(ckpt, organization=org)<br></code></pre></td></tr></table></figure><ul><li>Dataset and IterableDataset</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader, Dataset, IterableDataset<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, m, n</span>):<br>        self.x = np.random.randn(m, n)<br>        self.y = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(m))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, i</span>):<br>        <span class="hljs-keyword">return</span> self.x[i], self.y[i]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.y)<br><br>ds = MyDataset(<span class="hljs-number">100</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(ds))  <span class="hljs-comment"># 100</span><br>ds[<span class="hljs-number">0</span>]  <span class="hljs-comment"># (array([ 0.06201527, -0.77968078, -0.68125061, -1.77969614, -0.66575581]), 0)</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterableDataset</span>(<span class="hljs-title class_ inherited__">IterableDataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.start = x<br>        self.end = y<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">range</span>(self.start, self.end))<br><br>ds1 = MyIterableDataset(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>)<br>ds2 = MyIterableDataset(<span class="hljs-number">9</span>, <span class="hljs-number">15</span>)<br>ds3 = ds1 + ds2<br>[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ds1]  <span class="hljs-comment"># [3, 4, 5, 6, 7]</span><br>[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ds3]  <span class="hljs-comment"># [3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14]</span><br>loader = DataLoader(ds3)<br><span class="hljs-built_in">list</span>(loader)<br><span class="hljs-comment"># [tensor([3]),</span><br><span class="hljs-comment">#  tensor([4]),</span><br><span class="hljs-comment">#  tensor([5]),</span><br><span class="hljs-comment">#  tensor([6]),</span><br><span class="hljs-comment">#  tensor([7]),</span><br><span class="hljs-comment">#  tensor([9]),</span><br><span class="hljs-comment">#  tensor([10]),</span><br><span class="hljs-comment">#  tensor([11]),</span><br><span class="hljs-comment">#  tensor([12]),</span><br><span class="hljs-comment">#  tensor([13]),</span><br><span class="hljs-comment">#  tensor([14])]</span><br><br><span class="hljs-comment"># infinite dataset</span><br>rng = np.random.default_rng()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InfIterableDataset</span>(<span class="hljs-title class_ inherited__">IterableDataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self._n = n<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        start = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            x = np.arange(start, start + self._n)<br>            y = rng.choice([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], size=<span class="hljs-number">1</span>, p=[<span class="hljs-number">0.4</span>, <span class="hljs-number">0.6</span>])<br>            <span class="hljs-keyword">yield</span> x, y<br>            start += self._n<br><br>window = <span class="hljs-number">5</span><br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> InfIterableDataset(window):<br>    <span class="hljs-built_in">print</span>(x, y)<br>    <span class="hljs-keyword">if</span> cnt &gt;= <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">break</span><br>    cnt += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>mapping and streaming</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>data_files = <span class="hljs-string">&quot;/media/whaow/datasets/PUBMED_title_abstracts_2019_baseline.jsonl&quot;</span><br><span class="hljs-comment"># memory mapped</span><br><span class="hljs-comment"># large_dataset = load_dataset(&quot;json&quot;, data_files=data_files, split=&quot;train&quot;)</span><br><span class="hljs-comment"># tokenizer_dataset2 = large_dataset.map(lambda x: tokenizer(x[&#x27;text&#x27;]), batched=True, batch_size=20000)</span><br><span class="hljs-comment"># streaming</span><br>large_dataset_streamed = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)<br>tokenizer_dataset = large_dataset_streamed.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>]))<br><br><span class="hljs-keyword">import</span> psutil<br><span class="hljs-comment"># 当前进程的memory info</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;psutil.Process().memory_info().rss/(<span class="hljs-number">1024</span>**<span class="hljs-number">2</span>):<span class="hljs-number">.2</span>f&#125;</span> MB&#x27;</span>)<br><br><span class="hljs-keyword">import</span> timeit<br>code_snippet = <span class="hljs-string">&#x27;&#x27;&#x27;batch_size = 20000</span><br><span class="hljs-string">for idx in tqdm(range(0, len(large_dataset), batch_size)):</span><br><span class="hljs-string">    _ = large_dataset[idx: idx+batch_size]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>  <span class="hljs-comment"># 对这对代码执行两次, 并统计运行的平均时间</span><br>duration = timeit.timeit(stmt=code_snippet, number=<span class="hljs-number">2</span>, <span class="hljs-built_in">globals</span>=<span class="hljs-built_in">globals</span>())<br><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(tokenizer_dataset)).keys()<br><span class="hljs-built_in">list</span>(large_dataset_streamed.take(<span class="hljs-number">5</span>))[-<span class="hljs-number">1</span>]<br>large_dataset[<span class="hljs-number">4</span>]  <span class="hljs-comment"># 结果与上行一致</span><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(large_dataset_streamed.skip(<span class="hljs-number">1000</span>)))<br>large_dataset[<span class="hljs-number">1000</span>]  <span class="hljs-comment"># 结果与上行一致</span><br></code></pre></td></tr></table></figure><ul><li>retain graph and GPU memory occupied</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor(<span class="hljs-number">1.</span>, requires_grad=<span class="hljs-literal">True</span>)<br>y = x**<span class="hljs-number">2</span><br>y.backward(retain_graph=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(x.grad)  <span class="hljs-comment"># tensor(2.)</span><br>y.backward()<br><span class="hljs-built_in">print</span>(x.grad)  <span class="hljs-comment"># tensor(4.)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_gpu_utilization</span>():  <span class="hljs-comment"># GPU memory occupied: 21296 MB.</span><br>    nvmlInit()<br>    total_used = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(torch.cuda.device_count()):<br>        handle = nvmlDeviceGetHandleByIndex(i)<br>        info = nvmlDeviceGetMemoryInfo(handle)<br>        total_used += info.used<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;GPU memory occupied: <span class="hljs-subst">&#123;total_used//<span class="hljs-number">1024</span>**<span class="hljs-number">2</span>&#125;</span> MB.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>sft</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>train_dataset = load_dataset(<span class="hljs-string">&quot;tatsu-lab/alpaca&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)<br>train_dataset<br><span class="hljs-comment"># Dataset(&#123;</span><br><span class="hljs-comment">#     features: [&#x27;instruction&#x27;, &#x27;input&#x27;, &#x27;output&#x27;, &#x27;text&#x27;],</span><br><span class="hljs-comment">#     num_rows: 52002</span><br><span class="hljs-comment"># &#125;)</span><br><span class="hljs-built_in">print</span>(train_dataset[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(train_dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;text&#x27;</span>])<br><br><span class="hljs-comment"># check tokenizer 的 vocab_size 与 model embedding layer 是否一致</span><br><span class="hljs-built_in">print</span>(tokenizer)<br><span class="hljs-built_in">print</span>(model.model.embed_tokens)<br>model.resize_token_embeddings(<span class="hljs-built_in">len</span>(tokenizer))<br><br><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> LoraConfig, get_peft_model, prepare_model_for_int8_training<br>model = prepare_model_for_int8_training(model)<br>peft_config = LoraConfig(r=<span class="hljs-number">16</span>, lora_alpha=<span class="hljs-number">32</span>, lora_dropout=<span class="hljs-number">0.05</span>, bias=<span class="hljs-string">&quot;none&quot;</span>, task_type=<span class="hljs-string">&quot;CAUSAL_LM&quot;</span>)<br>model = get_peft_model(model, peft_config)<br>training_args = TrainingArguments(<br>        output_dir=<span class="hljs-string">&quot;xgen-7b-tuned-alpaca-l1&quot;</span>,<br>        per_device_train_batch_size=<span class="hljs-number">4</span>,<br>        optim=<span class="hljs-string">&quot;adamw_torch&quot;</span>,<br>        logging_steps=<span class="hljs-number">10</span>,<br>        learning_rate=<span class="hljs-number">2e-4</span>,<br>        fp16=<span class="hljs-literal">True</span>,<br>        warmup_ratio=<span class="hljs-number">0.1</span>,<br>        lr_scheduler_type=<span class="hljs-string">&quot;linear&quot;</span>,<br>        num_train_epochs=<span class="hljs-number">1</span>,<br>        save_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,<br>        push_to_hub=<span class="hljs-literal">False</span>,<br>    )<br>trainer = SFTTrainer(<br>    model=model,<br>    train_dataset=train_dataset,<br>    dataset_text_field=<span class="hljs-string">&quot;text&quot;</span>,<br>    max_seq_length=<span class="hljs-number">1024</span>,<br>    tokenizer=tokenizer,<br>    args=training_args,<br>    packing=<span class="hljs-literal">True</span>,<br>    peft_config=peft_config,<br>)<br>trainer.train()<br></code></pre></td></tr></table></figure><ul><li>gradient checkpoints</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="hljs-string">&#x27;0&#x27;</span>  <span class="hljs-comment"># 单机多卡 -&gt; 单机单卡</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_summary</span>(<span class="hljs-params">result</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Time: <span class="hljs-subst">&#123;result.metrics[<span class="hljs-string">&#x27;train_runtime&#x27;</span>]:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Samples/second: <span class="hljs-subst">&#123;result.metrics[<span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>]:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)<br>    print_gpu_utilization()<br><br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments, Trainer<br>default_args = &#123;<br>    <span class="hljs-string">&quot;output_dir&quot;</span>: <span class="hljs-string">&quot;tmp&quot;</span>,<br>    <span class="hljs-string">&quot;evaluation_strategy&quot;</span>: <span class="hljs-string">&quot;steps&quot;</span>,<br>    <span class="hljs-string">&quot;num_train_epochs&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;log_level&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>    <span class="hljs-string">&quot;report_to&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>&#125;<br><span class="hljs-comment"># training_args = TrainingArguments(per_device_train_batch_size=4, **default_args)</span><br>training_args = TrainingArguments(<br>    per_device_train_batch_size=<span class="hljs-number">1</span>, gradient_accumulation_steps=<span class="hljs-number">4</span>, gradient_checkpointing=<span class="hljs-literal">True</span>, **default_args<br>)<br>trainer = Trainer(model=model, args=training_args, train_dataset=ds)<br>result = trainer.train()<br>print_summary(result)<br></code></pre></td></tr></table></figure><ul><li>pipeline</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM<br>model_name = <span class="hljs-string">&quot;meta-llama/Llama-2-7b-chat-hf&quot;</span><br>tokenizer = AutoTokenizer.from_pretrained(model_name)<br>pipeline = transformers.pipeline(<br>    <span class="hljs-string">&quot;text-generation&quot;</span>,<br>    model=model_name,<br>    torch_dtype=torch.float16,<br>    device_map=<span class="hljs-string">&quot;auto&quot;</span><br>)<br><span class="hljs-built_in">print</span>(tokenizer)<br><span class="hljs-built_in">print</span>(pipeline.model)<br><br>sequences = pipeline(<br>    <span class="hljs-string">&#x27;I liked &quot;Breaking Bad&quot; and &quot;Band of Brothers&quot;. Do you have any recommendations of other shows I might like?\\n&#x27;</span>,<br>    do_sample=<span class="hljs-literal">True</span>,<br>    top_k=<span class="hljs-number">10</span>,<br>    num_return_sequences=<span class="hljs-number">3</span>,<br>    eos_token_id=tokenizer.eos_token_id,<br>    max_length=<span class="hljs-number">200</span>,<br>)<br><span class="hljs-keyword">for</span> seq <span class="hljs-keyword">in</span> sequences:<br>    <span class="hljs-built_in">print</span>(seq[<span class="hljs-string">&#x27;generated_text&#x27;</span>] + <span class="hljs-string">&#x27;\\n\\n&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>trl</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForCausalLM<br><span class="hljs-keyword">from</span> trl <span class="hljs-keyword">import</span> AutoModelForCausalLMWithValueHead, PPOConfig, PPOTrainer<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_seed</span>(<span class="hljs-params">seed</span>):  <span class="hljs-comment"># 确保结果可复现</span><br>    torch.manual_seed(seed)<br>    torch.cuda.manual_seed_all(seed)<br>    np.random.seed(seed)<br>    random.seed(seed)<br>    torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span><br>setup_seed(<span class="hljs-number">1</span>)<br><br>model = AutoModelForCausalLMWithValueHead.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)<br>model_ref = AutoModelForCausalLMWithValueHead.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)<br>tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)<br>tokenizer.pad_token = tokenizer.eos_token<br><span class="hljs-built_in">print</span>(tokenizer)<br><span class="hljs-built_in">print</span>(model.pretrained_model)<br><span class="hljs-built_in">print</span>(model.v_head)<br><span class="hljs-comment"># ValueHead(</span><br><span class="hljs-comment">#   (dropout): Dropout(p=0.1, inplace=False)</span><br><span class="hljs-comment">#   (summary): Linear(in_features=768, out_features=1, bias=True)</span><br><span class="hljs-comment">#   (flatten): Flatten(start_dim=1, end_dim=-1)</span><br><span class="hljs-comment"># )</span><br><br>ppo_config = &#123;<span class="hljs-string">&quot;batch_size&quot;</span>: <span class="hljs-number">1</span>&#125;<br>config = PPOConfig(**ppo_config)<br>ppo_trainer = PPOTrainer(config, model, model_ref, tokenizer)<br><br>query_txt = <span class="hljs-string">&quot;This morning I went to the &quot;</span><br>query_tensor = tokenizer.encode(query_txt, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).to(model.pretrained_model.device)<br>query_tensor  <span class="hljs-comment"># tensor([[1212, 3329,  314, 1816,  284,  262,  220]], device=&#x27;cuda:0&#x27;)</span><br><br>generation_kwargs = &#123;<br>    <span class="hljs-string">&quot;min_length&quot;</span>: -<span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;top_k&quot;</span>: <span class="hljs-number">0.0</span>,<br>    <span class="hljs-string">&quot;top_p&quot;</span>: <span class="hljs-number">1.0</span>,<br>    <span class="hljs-string">&quot;do_sample&quot;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&quot;pad_token_id&quot;</span>: tokenizer.eos_token_id,<br>    <span class="hljs-string">&quot;max_new_tokens&quot;</span>: <span class="hljs-number">20</span>,<br>&#125;<br>response_tensor = ppo_trainer.generate([item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> query_tensor], return_prompt=<span class="hljs-literal">True</span>, **generation_kwargs)<br>response_txt = tokenizer.decode(response_tensor[<span class="hljs-number">0</span>])<br>response_txt  <span class="hljs-comment"># &#x27;This morning I went to the vernacular and found myself at a bar, cook, with a wife. Buggas together in&#x27;</span><br>reward = [torch.tensor(<span class="hljs-number">1.0</span>, device=model.pretrained_model.device)]  <span class="hljs-comment"># 此处为简化的表示</span><br>train_stats = ppo_trainer.step([query_tensor[<span class="hljs-number">0</span>]], [response_tensor[<span class="hljs-number">0</span>]], reward)<br><br>input_ids = torch.cat([query_tensor[<span class="hljs-number">0</span>], response_tensor[<span class="hljs-number">0</span>]])<br>base_model_output = model.pretrained_model(input_ids, output_hidden_states=<span class="hljs-literal">True</span>)<br>last_hidden_state = base_model_output.hidden_states[-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(last_hidden_state.shape)  <span class="hljs-comment"># torch.Size([34, 768])</span><br>lm_logits = base_model_output.logits<br><span class="hljs-built_in">print</span>(lm_logits.shape)  <span class="hljs-comment"># torch.Size([34, 50257])</span><br><span class="hljs-keyword">with</span> torch.no_grad():<br>    <span class="hljs-comment"># (34, 768) * (768, 1) =&gt; (34, 1)</span><br>    value = model.v_head(last_hidden_state).squeeze(-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(value.shape)  <span class="hljs-comment"># torch.Size([34])</span><br></code></pre></td></tr></table></figure><ul><li>RMSNorm; Swish/SwiLU/SiLU</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RMSNorm</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dim: <span class="hljs-built_in">int</span>, eps: <span class="hljs-built_in">float</span> = <span class="hljs-number">1e-6</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.eps = eps<br>        self.weight = nn.Parameter(torch.ones(dim))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_norm</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> x * torch.rsqrt(x.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>).mean(-<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>) + self.eps)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        output = self._norm(x.<span class="hljs-built_in">float</span>()).type_as(x)<br>        <span class="hljs-keyword">return</span> output * self.weight<br><br>x = torch.randn(bs, seq_len, embedding_dim)<br>rms_norm = RMSNorm(embedding_dim)<br>x_rms = rms_norm(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">1</span>/(<span class="hljs-number">1</span> + np.exp(-x))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">swish</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x*sigmoid(x)<br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>plt.rcParams[<span class="hljs-string">&#x27;figure.dpi&#x27;</span>] = <span class="hljs-number">120</span><br>x = np.arange(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">.01</span>)<br>plt.plot(x, swish(x))<br><br>x = torch.randn(<span class="hljs-number">5</span>)<br>x/(<span class="hljs-number">1</span>+torch.exp(-x))<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br>F.silu(x)<br></code></pre></td></tr></table></figure><ul><li><strong>cache KV</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForCausalLM, AutoTokenizer<br>device = <span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span><br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)<br>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>).to(device)<br><br><span class="hljs-keyword">for</span> use_cache <span class="hljs-keyword">in</span> (<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>):<br>    times = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):  <span class="hljs-comment"># measuring 10 generations</span><br>        start = time.time()<br>        model.generate(**tokenizer(<span class="hljs-string">&quot;What is KV caching?&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).to(device), <br>                       use_cache=use_cache, <br>                       max_new_tokens=<span class="hljs-number">1000</span>)<br>        times.append(time.time() - start)<br>    mu = <span class="hljs-built_in">round</span>(np.mean(times), <span class="hljs-number">3</span>)<br>    std = <span class="hljs-built_in">round</span>(np.std(times), <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;with&#x27;</span> <span class="hljs-keyword">if</span> use_cache <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;without&#x27;</span>&#125;</span> KV caching: <span class="hljs-subst">&#123;mu&#125;</span> +- <span class="hljs-subst">&#123;std&#125;</span> seconds&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diffusers</title>
    <link href="/2023/12/28/Diffusers/"/>
    <url>/2023/12/28/Diffusers/</url>
    
    <content type="html"><![CDATA[<ul><li>Causal Attention</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">seq_ids = torch.arange(seq_length, device=device)<br>                causal_mask = seq_ids[<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, :].repeat(batch_size, seq_length, <span class="hljs-number">1</span>) &lt;= seq_ids[<span class="hljs-literal">None</span>, :, <span class="hljs-literal">None</span>]<br></code></pre></td></tr></table></figure><ul><li>DDPM</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DDPMPipeline<br>ddpm = DDPMPipeline.from_pretrained(<span class="hljs-string">&quot;google/ddpm-cat-256&quot;</span>, use_safetensors=<span class="hljs-literal">True</span>).to(<span class="hljs-string">&quot;cuda&quot;</span>)<br>image = ddpm(num_inference_steps=<span class="hljs-number">25</span>).images[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DDPMScheduler, UNet2DModel<br>scheduler = DDPMScheduler.from_pretrained(<span class="hljs-string">&quot;google/ddpm-cat-256&quot;</span>)<br>model = UNet2DModel.from_pretrained(<span class="hljs-string">&quot;google/ddpm-cat-256&quot;</span>, use_safetensors=<span class="hljs-literal">True</span>).to(<span class="hljs-string">&quot;cuda&quot;</span>)<br>scheduler.set_timesteps(<span class="hljs-number">50</span>): <br><br><span class="hljs-comment"># scheduler.timesteps</span><br><span class="hljs-comment"># tensor([980, 960, 940, 920, 900, 880, 860, 840, 820, 800, 780, 760, 740, 720,</span><br><span class="hljs-comment">#    700, 680, 660, 640, 620, 600, 580, 560, 540, 520, 500, 480, 460, 440,</span><br><span class="hljs-comment">#    420, 400, 380, 360, 340, 320, 300, 280, 260, 240, 220, 200, 180, 160,</span><br><span class="hljs-comment">#    140, 120, 100,  80,  60,  40,  20,   0])</span><br><br><span class="hljs-keyword">import</span> torch<br>sample_size = model.config.sample_size<br>noise = torch.randn((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, sample_size, sample_size), device=<span class="hljs-string">&quot;cuda&quot;</span>)<br><span class="hljs-built_in">input</span> = noise<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> scheduler.timesteps:<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        noisy_residual = model(<span class="hljs-built_in">input</span>, t).sample<br>    previous_noisy_sample = scheduler.step(noisy_residual, t, <span class="hljs-built_in">input</span>).prev_sample<br>    <span class="hljs-built_in">input</span> = previous_noisy_sample<br><br><span class="hljs-comment"># show</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>image = (<span class="hljs-built_in">input</span> / <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span>).clamp(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).squeeze()<br>image = (image.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>) * <span class="hljs-number">255</span>).<span class="hljs-built_in">round</span>().to(torch.uint8).cpu().numpy()<br>image = Image.fromarray(image)<br></code></pre></td></tr></table></figure><ul><li>Stable Diffusion</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline<br>pipe = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, revision=<span class="hljs-string">&quot;fp16&quot;</span>, torch_dtype=torch.float16)<br>prompt = <span class="hljs-string">&quot;a photograph of an astronaut riding a horse&quot;</span> <span class="hljs-comment"># revision=&quot;fp16&quot;表示半精度</span><br>image = pipe(prompt).images[<span class="hljs-number">0</span>]<br><br>result = pipe(prompt)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment"># &#123;</span><br><span class="hljs-comment">#     &#x27;images&#x27;: [&lt;PIL.Image.Image image mode=RGB size=512x512&gt;],</span><br><span class="hljs-comment">#     &#x27;nsfw_content_detected&#x27;: [False]</span><br><span class="hljs-comment"># &#125;</span><br><br><span class="hljs-comment"># Advanced</span><br>generator = torch.Generator(<span class="hljs-string">&quot;cuda&quot;</span>).manual_seed(<span class="hljs-number">1024</span>)<br>image = pipe(prompt, guidance_scale=<span class="hljs-number">7.5</span>, num_inference_steps=<span class="hljs-number">15</span>, generator=generator).images[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 通过generator和seed可以使每次生成的图片一致</span><br><span class="hljs-comment"># guidance_scale表示生成图片和文本的贴合程度, 但可能会导致质量与多样性下降</span><br><span class="hljs-comment"># num_inference_steps表示去噪步数</span><br><br><span class="hljs-comment"># 对多张图片用网格的方式来展示</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">image_grid</span>(<span class="hljs-params">imgs, rows, cols</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(imgs) == rows*cols<br>    w, h = imgs[<span class="hljs-number">0</span>].size<br>    grid = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, size=(cols*w, rows*h))<br>    grid_w, grid_h = grid.size<br>    <span class="hljs-keyword">for</span> i, img <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(imgs):<br>        grid.paste(img, box=(i%cols*w, i//cols*h))<br>    <span class="hljs-keyword">return</span> grid<br><br>num_images = <span class="hljs-number">3</span><br>prompt = [<span class="hljs-string">&quot;a photograph of an astronaut riding a horse&quot;</span>] * num_images<br>images = pipe(prompt).images<br>grid = image_grid(images, rows=<span class="hljs-number">1</span>, cols=<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 修改图片的尺寸</span><br>prompt = <span class="hljs-string">&quot;a photograph of an astronaut riding a horse&quot;</span><br>image = pipe(prompt, height=<span class="hljs-number">512</span>, width=<span class="hljs-number">768</span>).images[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><ul><li>Details of Stable Diffusion</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CLIPTextModel, CLIPTokenizer<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> AutoencoderKL, UNet2DConditionModel, PNDMScheduler<br>vae = AutoencoderKL.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, subfolder=<span class="hljs-string">&quot;vae&quot;</span>, use_safetensors=<span class="hljs-literal">True</span>)<br>tokenizer = CLIPTokenizer.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, subfolder=<span class="hljs-string">&quot;tokenizer&quot;</span>)<br>text_encoder = CLIPTextModel.from_pretrained(<br>    <span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, subfolder=<span class="hljs-string">&quot;text_encoder&quot;</span>, use_safetensors=<span class="hljs-literal">True</span><br>)<br>unet = UNet2DConditionModel.from_pretrained(<br>    <span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, subfolder=<span class="hljs-string">&quot;unet&quot;</span>, use_safetensors=<span class="hljs-literal">True</span><br>)<br><br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> LMSDiscreteScheduler<br>scheduler = LMSDiscreteScheduler(beta_start=<span class="hljs-number">0.00085</span>, beta_end=<span class="hljs-number">0.012</span>, beta_schedule=<span class="hljs-string">&quot;scaled_linear&quot;</span>, num_train_timesteps=<span class="hljs-number">1000</span>)<br><br>prompt = [<span class="hljs-string">&quot;a photograph of an astronaut riding a horse&quot;</span>]<br>height = <span class="hljs-number">512</span>  <span class="hljs-comment"># default height of Stable Diffusion</span><br>width = <span class="hljs-number">512</span>  <span class="hljs-comment"># default width of Stable Diffusion</span><br>num_inference_steps = <span class="hljs-number">25</span>  <span class="hljs-comment"># Number of denoising steps</span><br>guidance_scale = <span class="hljs-number">7.5</span>  <span class="hljs-comment"># Scale for classifier-free guidance</span><br>generator = torch.manual_seed(<span class="hljs-number">0</span>)  <span class="hljs-comment"># Seed generator to create the initial latent noise</span><br>batch_size = <span class="hljs-built_in">len</span>(prompt)<br><br>text_input = tokenizer(<br>    prompt, padding=<span class="hljs-string">&quot;max_length&quot;</span>, max_length=tokenizer.model_max_length, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span><br>)<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    text_embeddings = text_encoder(text_input.input_ids.to(torch_device))[<span class="hljs-number">0</span>]<br>max_length = text_input.input_ids.shape[-<span class="hljs-number">1</span>]<br>uncond_input = tokenizer([<span class="hljs-string">&quot;&quot;</span>] * batch_size, padding=<span class="hljs-string">&quot;max_length&quot;</span>, max_length=max_length, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>uncond_embeddings = text_encoder(uncond_input.input_ids.to(torch_device))[<span class="hljs-number">0</span>] <span class="hljs-comment"># for classifier-free guidance</span><br>text_embeddings = orch.cat([uncond_embeddings, text_embeddings])<br>latents = torch.randn(<br>    (batch_size, unet.config.in_channels, height // <span class="hljs-number">8</span>, width // <span class="hljs-number">8</span>),<br>    generator=generator,<br>    device=torch_device,<br>)<br><br>scheduler.set_timesteps(num_inference_steps)<br>latents = latents * scheduler.init_noise_sigma <span class="hljs-comment"># The K-LMS scheduler needs to multiply the latents by its sigma values</span><br><br><span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tqdm(scheduler.timesteps):<br>    <span class="hljs-comment"># expand the latents if we are doing classifier-free guidance to avoid doing two forward passes.</span><br>    latent_model_input = torch.cat([latents] * <span class="hljs-number">2</span>)<br>    latent_model_input = scheduler.scale_model_input(latent_model_input, timestep=t)<br>    <span class="hljs-comment"># predict the noise residual</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        noise_pred = unet(latent_model_input, t, encoder_hidden_states=text_embeddings).sample<br>    <span class="hljs-comment"># perform guidance</span><br>    noise_pred_uncond, noise_pred_text = noise_pred.chunk(<span class="hljs-number">2</span>)<br>    noise_pred = noise_pred_uncond + guidance_scale * (noise_pred_text - noise_pred_uncond)<br>    <span class="hljs-comment"># compute the previous noisy sample x_t -&gt; x_t-1</span><br>    latents = scheduler.step(noise_pred, t, latents).prev_sample<br><br><span class="hljs-comment"># scale and decode the image latents with vae</span><br>latents = <span class="hljs-number">1</span> / <span class="hljs-number">0.18215</span> * latents<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    image = vae.decode(latents).sample<br><br><span class="hljs-comment"># convert the image to PIL</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>image = (image / <span class="hljs-number">2</span> + <span class="hljs-number">0.5</span>).clamp(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).squeeze()<br>image = (image.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>) * <span class="hljs-number">255</span>).to(torch.uint8).cpu().numpy()<br>images = (image * <span class="hljs-number">255</span>).<span class="hljs-built_in">round</span>().astype(<span class="hljs-string">&quot;uint8&quot;</span>)<br>image = Image.fromarray(image)<br></code></pre></td></tr></table></figure><ul><li><strong>AutoPipeline</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> AutoPipelineForText2Image<br>pipeline = AutoPipelineForText2Image.from_pretrained(<br>    <span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, torch_dtype=torch.float16, use_safetensors=<span class="hljs-literal">True</span><br>).to(<span class="hljs-string">&quot;cuda&quot;</span>)<br>prompt = <span class="hljs-string">&quot;peasant and dragon combat, wood cutting style, viking era, bevel with rune&quot;</span><br>image = pipeline(prompt, num_inference_steps=<span class="hljs-number">25</span>).images[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> AutoPipelineForImage2Image<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br>pipeline = AutoPipelineForImage2Image.from_pretrained(<br>    <span class="hljs-string">&quot;runwayml/stable-diffusion-v1-5&quot;</span>, torch_dtype=torch.float16, use_safetensors=<span class="hljs-literal">True</span><br>).to(<span class="hljs-string">&quot;cuda&quot;</span>)<br>prompt = <span class="hljs-string">&quot;a portrait of a dog wearing a pearl earring&quot;</span><br>url = <span class="hljs-string">&quot;&lt;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/1665_Girl_with_a_Pearl_Earring.jpg/800px-1665_Girl_with_a_Pearl_Earring.jpg&gt;&quot;</span><br>response = requests.get(url)<br>image = Image.<span class="hljs-built_in">open</span>(BytesIO(response.content)).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>image.thumbnail((<span class="hljs-number">768</span>, <span class="hljs-number">768</span>)) <span class="hljs-comment"># 生成图像的缩略图, (768, 768) 定义缩略图的最大尺寸</span><br><span class="hljs-comment"># 如果原始图像的宽度或高度超过 768 像素, 则会按比例缩小图像, 使得宽度或高度等于 768 像素, 另一维度相应地按比例减小, 以保持原始的宽高比</span><br>image = pipeline(prompt, image, num_inference_steps=<span class="hljs-number">200</span>, strength=<span class="hljs-number">0.75</span>, guidance_scale=<span class="hljs-number">10.5</span>).images[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> diffusers.utils <span class="hljs-keyword">import</span> load_image<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> AutoPipelineForInpainting<br><br>pipeline = AutoPipelineForInpainting.from_pretrained(<br>    <span class="hljs-string">&quot;stabilityai/stable-diffusion-xl-base-1.0&quot;</span>, torch_dtype=torch.float16, use_safetensors=<span class="hljs-literal">True</span><br>).to(<span class="hljs-string">&quot;cuda&quot;</span>)<br>img_url = <span class="hljs-string">&quot;&lt;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png&gt;&quot;</span><br>mask_url = <span class="hljs-string">&quot;&lt;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png&gt;&quot;</span><br>init_image = load_image(img_url).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>mask_image = load_image(mask_url).convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>prompt = <span class="hljs-string">&quot;A majestic tiger sitting on a bench&quot;</span><br>image = pipeline(prompt, image=init_image, mask_image=mask_image, num_inference_steps=<span class="hljs-number">50</span>, strength=<span class="hljs-number">0.80</span>).images[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><ul><li>Training</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrainingConfig</span>:<br>    image_size = <span class="hljs-number">128</span>  <span class="hljs-comment"># the generated image resolution</span><br>    train_batch_size = <span class="hljs-number">16</span><br>    eval_batch_size = <span class="hljs-number">16</span>  <span class="hljs-comment"># how many images to sample during evaluation</span><br>    num_epochs = <span class="hljs-number">50</span><br>    gradient_accumulation_steps = <span class="hljs-number">1</span><br>    learning_rate = <span class="hljs-number">1e-4</span><br>    lr_warmup_steps = <span class="hljs-number">500</span><br>    save_image_epochs = <span class="hljs-number">10</span><br>    save_model_epochs = <span class="hljs-number">30</span><br>    mixed_precision = <span class="hljs-string">&quot;fp16&quot;</span>  <span class="hljs-comment"># `no` for float32, `fp16` for automatic mixed precision</span><br>    output_dir = <span class="hljs-string">&quot;ddpm-butterflies-128&quot;</span>  <span class="hljs-comment"># the model name locally and on the HF Hub</span><br><br>    push_to_hub = <span class="hljs-literal">True</span>  <span class="hljs-comment"># whether to upload the saved model to the HF Hub</span><br>    hub_model_id = <span class="hljs-string">&quot;&lt;your-username&gt;/&lt;my-awesome-model&gt;&quot;</span>  <span class="hljs-comment"># the name of the repository to create on the HF Hub</span><br>    hub_private_repo = <span class="hljs-literal">False</span><br>    overwrite_output_dir = <span class="hljs-literal">True</span>  <span class="hljs-comment"># overwrite the old model when re-running the notebook</span><br>    seed = <span class="hljs-number">0</span><br>config = TrainingConfig()<br><br><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br>config.dataset_name = <span class="hljs-string">&quot;huggan/smithsonian_butterflies_subset&quot;</span><br>dataset = load_dataset(config.dataset_name, split=<span class="hljs-string">&quot;train&quot;</span>)<br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>fig, axs = plt.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">4</span>))<br><span class="hljs-keyword">for</span> i, image <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dataset[:<span class="hljs-number">4</span>][<span class="hljs-string">&quot;image&quot;</span>]):<br>    axs[i].imshow(image)<br>    axs[i].set_axis_off()<br>fig.show()<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br>preprocess = transforms.Compose(<br>    [<br>        transforms.Resize((config.image_size, config.image_size)),<br>        transforms.RandomHorizontalFlip(),<br>        transforms.ToTensor(),<br>        transforms.Normalize([<span class="hljs-number">0.5</span>], [<span class="hljs-number">0.5</span>]),<br>    ]<br>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">examples</span>):<br>    images = [preprocess(image.convert(<span class="hljs-string">&quot;RGB&quot;</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;images&quot;</span>: images&#125;<br>dataset.set_transform(transform)<br><br>train_dataloader = torch.utils.data.DataLoader(dataset, batch_size=config.train_batch_size, shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> UNet2DModel<br>model = UNet2DModel(<br>    sample_size=config.image_size,  <span class="hljs-comment"># the target image resolution</span><br>    in_channels=<span class="hljs-number">3</span>,  <span class="hljs-comment"># the number of input channels, 3 for RGB images</span><br>    out_channels=<span class="hljs-number">3</span>,  <span class="hljs-comment"># the number of output channels</span><br>    layers_per_block=<span class="hljs-number">2</span>,  <span class="hljs-comment"># how many ResNet layers to use per UNet block</span><br>    block_out_channels=(<span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">256</span>, <span class="hljs-number">256</span>, <span class="hljs-number">512</span>, <span class="hljs-number">512</span>),  <span class="hljs-comment"># the number of output channels for each UNet block</span><br>    down_block_types=(<br>        <span class="hljs-string">&quot;DownBlock2D&quot;</span>,  <span class="hljs-comment"># a regular ResNet downsampling block</span><br>        <span class="hljs-string">&quot;DownBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;DownBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;DownBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;AttnDownBlock2D&quot;</span>,  <span class="hljs-comment"># a ResNet downsampling block with spatial self-attention</span><br>        <span class="hljs-string">&quot;DownBlock2D&quot;</span>,<br>    ),<br>    up_block_types=(<br>        <span class="hljs-string">&quot;UpBlock2D&quot;</span>,  <span class="hljs-comment"># a regular ResNet upsampling block</span><br>        <span class="hljs-string">&quot;AttnUpBlock2D&quot;</span>,  <span class="hljs-comment"># a ResNet upsampling block with spatial self-attention</span><br>        <span class="hljs-string">&quot;UpBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;UpBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;UpBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;UpBlock2D&quot;</span>,<br>    ),<br>)<br><br><span class="hljs-keyword">from</span> diffusers.optimization <span class="hljs-keyword">import</span> get_cosine_schedule_with_warmup<br>optimizer = torch.optim.AdamW(model.parameters(), lr=config.learning_rate)<br>lr_scheduler = get_cosine_schedule_with_warmup(<br>    optimizer=optimizer,<br>    num_warmup_steps=config.lr_warmup_steps,<br>    num_training_steps=(<span class="hljs-built_in">len</span>(train_dataloader) * config.num_epochs),<br>)<br><br><span class="hljs-comment"># An example</span><br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DDPMScheduler<br>noise_scheduler = DDPMScheduler(num_train_timesteps=<span class="hljs-number">1000</span>)<br>noise = torch.randn(sample_image.shape)<br>timesteps = torch.LongTensor([<span class="hljs-number">50</span>])<br>noisy_image = noise_scheduler.add_noise(sample_image, noise, timesteps)<br>Image.fromarray(((noisy_image.permute(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1.0</span>) * <span class="hljs-number">127.5</span>).<span class="hljs-built_in">type</span>(torch.uint8).numpy()[<span class="hljs-number">0</span>])<br>noise_pred = model(noisy_image, timesteps).sample<br>loss = F.mse_loss(noise_pred, noise)<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DDPMPipeline<br><span class="hljs-keyword">from</span> diffusers.utils <span class="hljs-keyword">import</span> make_image_grid<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate</span>(<span class="hljs-params">config, epoch, pipeline</span>):<br>    <span class="hljs-comment"># Sample some images from random noise (this is the backward diffusion process).</span><br>    <span class="hljs-comment"># The default pipeline output type is `List[PIL.Image]`</span><br>    images = pipeline(<br>        batch_size=config.eval_batch_size,<br>        generator=torch.manual_seed(config.seed),<br>    ).images<br><br>    <span class="hljs-comment"># Make a grid out of the images</span><br>    image_grid = make_image_grid(images, rows=<span class="hljs-number">4</span>, cols=<span class="hljs-number">4</span>)<br><br>    <span class="hljs-comment"># Save the images</span><br>    test_dir = os.path.join(config.output_dir, <span class="hljs-string">&quot;samples&quot;</span>)<br>    os.makedirs(test_dir, exist_ok=<span class="hljs-literal">True</span>)<br>    image_grid.save(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;test_dir&#125;</span>/<span class="hljs-subst">&#123;epoch:04d&#125;</span>.png&quot;</span>)<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator<br><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> create_repo, upload_folder<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_loop</span>(<span class="hljs-params">config, model, noise_scheduler, optimizer, train_dataloader, lr_scheduler</span>):<br>    <span class="hljs-comment"># Initialize accelerator and tensorboard logging</span><br>    accelerator = Accelerator(<br>        mixed_precision=config.mixed_precision,<br>        gradient_accumulation_steps=config.gradient_accumulation_steps,<br>        log_with=<span class="hljs-string">&quot;tensorboard&quot;</span>,<br>        project_dir=os.path.join(config.output_dir, <span class="hljs-string">&quot;logs&quot;</span>),<br>    )<br>    <span class="hljs-keyword">if</span> accelerator.is_main_process:<br>        <span class="hljs-keyword">if</span> config.output_dir <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            os.makedirs(config.output_dir, exist_ok=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> config.push_to_hub:<br>            repo_id = create_repo(<br>                repo_id=config.hub_model_id <span class="hljs-keyword">or</span> Path(config.output_dir).name, exist_ok=<span class="hljs-literal">True</span><br>            ).repo_id<br>        accelerator.init_trackers(<span class="hljs-string">&quot;train_example&quot;</span>)<br><br>    <span class="hljs-comment"># Prepare everything</span><br>    <span class="hljs-comment"># There is no specific order to remember, you just need to unpack the</span><br>    <span class="hljs-comment"># objects in the same order you gave them to the prepare method.</span><br>    model, optimizer, train_dataloader, lr_scheduler = accelerator.prepare(<br>        model, optimizer, train_dataloader, lr_scheduler<br>    )<br><br>    global_step = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># Now you train the model</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(config.num_epochs):<br>        <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):<br>            clean_images = batch[<span class="hljs-string">&quot;images&quot;</span>]<br>            <span class="hljs-comment"># Sample noise to add to the images</span><br>            noise = torch.randn(clean_images.shape, device=clean_images.device)<br>            bs = clean_images.shape[<span class="hljs-number">0</span>]<br><br>            <span class="hljs-comment"># Sample a random timestep for each image</span><br>            timesteps = torch.randint(<br>                <span class="hljs-number">0</span>, noise_scheduler.config.num_train_timesteps, (bs,), device=clean_images.device,<br>                dtype=torch.int64<br>            )<br><br>            <span class="hljs-comment"># Add noise to the clean images according to the noise magnitude at each timestep</span><br>            <span class="hljs-comment"># (this is the forward diffusion process)</span><br>            noisy_images = noise_scheduler.add_noise(clean_images, noise, timesteps)<br><br>            <span class="hljs-keyword">with</span> accelerator.accumulate(model):<br>                <span class="hljs-comment"># Predict the noise residual</span><br>                noise_pred = model(noisy_images, timesteps, return_dict=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]<br>                loss = F.mse_loss(noise_pred, noise)<br>                accelerator.backward(loss)<br><br>                accelerator.clip_grad_norm_(model.parameters(), <span class="hljs-number">1.0</span>)<br>                optimizer.step()<br>                lr_scheduler.step()<br>                optimizer.zero_grad()<br><br>        <span class="hljs-comment"># After each epoch you optionally sample some demo images with evaluate() and save the model</span><br>        <span class="hljs-keyword">if</span> accelerator.is_main_process:<br>            pipeline = DDPMPipeline(unet=accelerator.unwrap_model(model), scheduler=noise_scheduler)<br><br>            <span class="hljs-keyword">if</span> (epoch + <span class="hljs-number">1</span>) % config.save_image_epochs == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> epoch == config.num_epochs - <span class="hljs-number">1</span>:<br>                evaluate(config, epoch, pipeline)<br>                <span class="hljs-keyword">if</span> config.push_to_hub:<br>                    upload_folder(<br>                        repo_id=repo_id,<br>                        folder_path=config.output_dir,<br>                        commit_message=<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">&#123;epoch&#125;</span>&quot;</span>,<br>                        ignore_patterns=[<span class="hljs-string">&quot;step_*&quot;</span>, <span class="hljs-string">&quot;epoch_*&quot;</span>],<br>                    )<br>                <span class="hljs-keyword">else</span>:<br>                    pipeline.save_pretrained(config.output_dir)<br><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> notebook_launcher<br>args = (config, model, noise_scheduler, optimizer, train_dataloader, lr_scheduler)<br>notebook_launcher(train_loop, args, num_processes=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">import</span> glob<br>sample_images = <span class="hljs-built_in">sorted</span>(glob.glob(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;config.output_dir&#125;</span>/samples/*.png&quot;</span>)) <span class="hljs-comment"># 接收一个路径模式, 并返回与该模式匹配的所有文件路径的列表</span><br>Image.<span class="hljs-built_in">open</span>(sample_images[-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Diffusion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zookeeper-Redis-MongoDB</title>
    <link href="/2023/12/16/Zookeeper-Redis-MongoDB/"/>
    <url>/2023/12/16/Zookeeper-Redis-MongoDB/</url>
    
    <content type="html"><![CDATA[<ul><li>Zookeeper: Apache Hadoop项目下的一个子项目;一个分布式、开源的分布式应用程序的协调服务; 提供的主要功能为: 配置管理,分布式锁, 集群管理</li><li>Redis(Remote Dictionary Server): 键值类型的非关系型数据库,value支持多种不同数据结构(文档类型: MongoDB; 列类型: HBase; Graph类型:Neo4j)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 安装Redis, 此处使用的环境为CentOS 7<br>// Redis是基于C语言编写的, 首先需要安装Redis所需的gcc依赖<br>yum install -y gcc tcl<br>// 将官网下载的安装包上传至虚拟机的/usr/local/src目录<br>// 进入redis-6.2.6目录, 编译并安装<br>make &amp;&amp; make install<br>// 默认的安装路径为/usr/local/bin, 进入该路径能看到redis相关的文件:<br>// redis-cli: redis提供的命令行客户端<br>// redis-server: redis服务器启动脚本, 直接运行即可启动<br>// redis-sentinel: redis哨兵启动脚本<br><br>// 指定配置启动, 需修改redis-6.2.6目录下的redis.conf文件<br>// 文件备份: <span class="hljs-built_in">cp</span> redis.conf redis.conf.bck<br>// 修改配置如下:<br><span class="hljs-built_in">bind</span> 0.0.0.0 // 127.0.0.1: 只能在本地访问; 0.0.0.0: 可以在任意IP访问<br>daemonize <span class="hljs-built_in">yes</span> // 守护进程, <span class="hljs-built_in">yes</span>表示可在后台运行<br>requirepass 123123 // 设置后访问redis需输入密码<br>port 6379 // 默认的监听端口<br><span class="hljs-built_in">dir</span> . // 默认为当前目录, 运行redis-server时, 命令、日志、持久化文件会保存在这个目录<br>database 1 // 数据库数量, 此处表示只使用1个数据库(默认值为16, 即有16个数据库, 编号为0-15)<br>maxmemory 512mb // redis能够使用的最大内存<br>logfile <span class="hljs-string">&quot;redis.log&quot;</span> // 日志文件, 默认为空(即不记录日志), 可以指定日志文件名<br><br>// 修改完毕后, 执行redis-server redis.conf命令运行<br><br>// 配置系统文件<br>vi /etc/systemd/system/redis.service<br><br>[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=multi-user.target<br><br>// 重载系统服务: systemctl daemon-reload // 使配置文件生效<br>// 启动: systemctl start redis<br>// 停止: systemctl stop redis<br>// 重启: systemctl restart redis<br>// 查看状态: systemctl status redis<br>// 让redis开机自启: systemctl <span class="hljs-built_in">enable</span> redis<br><br>// 命令行客户端<br>redis-cli<br>// -h(指定要连接的redis节点的IP地址, 默认为127.0.0.1)<br>// -p(指定要连接的redis节点的端口, 默认为6379)<br>// -a(指定redis的访问密码)<br>redis-cli -h=127.0.0.1 -p=6379 -a=123123<br>// 也可以先通过redis-cli -h=127.0.0.1 -p=6379连接, 再通过AUTH 123123输入密码<br><br><span class="hljs-built_in">set</span> age 20 // OK<br>get age // <span class="hljs-string">&quot;20&quot;</span><br><br>// Redis图形化界面的客户端<br>// &lt;https://github.com/lework/RedisDesktopManager-Windows/releases&gt;<br>// 进入1号库: <span class="hljs-keyword">select</span> 1<br>// 官方文档: &lt;https://redis.io/commands&gt;<br><br>// Redis通用命令<br>KEYS *<br>KEYS *a // 查询匹配的key<br>DEL age // 删除一个指定的key<br>MSET k1, v1, k2, v2, k3, v3 // 批量插入<br>EXISTS age // 判断指定的key是否存在<br>EXPIRE age 20 // 给一个key设置有效期(数值的单位为s), 到期时该key会被自动删除<br>TTL // 查看一个key的剩余有效期(-2表示已过期, -1表示永久有效)<br><br>// String类型<br>// value是字符串, 根据字符串格式可分为3类: string, int, <span class="hljs-built_in">float</span><br>// 常见命令<br>// SET: 添加或修改键值对 e.g <span class="hljs-built_in">set</span> name zhangsan<br>// GET: 根据key获取value e.g get name<br>// MSET: 多次添加或修改键值对 e.g MSET k1, v1, k2, v2, k3, v3<br>// MGET: 多次根据key获取value e.g MSET k1, k2, k3<br>// INCR: 使一个整型的自增1 e.g INCR age<br>// INCRBY: 使一个整型的自增指定步长 e.g INCRBY age 2<br>// INCRBYFLOAT: 使一个浮点型的自增指定步长 e.g INCRBYFLOAT socre 1.5<br>// SETNX: 添加一个键值对(前提是key不存在, 否则不执行) e.g <span class="hljs-built_in">set</span> name lisi<br>//                                                等价于 <span class="hljs-built_in">set</span> name lisi nx<br>// SETEX: 添加一个键值对并设置有效期 e.g setex name 10 lisi<br><br>// key层级结构<br>// Redis的key允许有多个单词形成层级结构, 单词之间用<span class="hljs-string">&quot;:&quot;</span>隔开<br>// e.g 项目名称为<span class="hljs-built_in">test</span>, 有user和product两种不同类型的数据, 则可定义:<br>// user相关的key为: <span class="hljs-built_in">test</span>:user:1 (1表示<span class="hljs-built_in">id</span>, 此处表示<span class="hljs-built_in">id</span>为1的user的信息)<br>// product相关的key为: <span class="hljs-built_in">test</span>:product:1 (1表示<span class="hljs-built_in">id</span>, 此处表示<span class="hljs-built_in">id</span>为1的product的信息)<br>// e.g <span class="hljs-built_in">set</span> <span class="hljs-built_in">test</span>:user:1 <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 1, &quot;name&quot;: zhangsan, &quot;age&quot;: 20&#125;&#x27;</span><br>//     <span class="hljs-built_in">set</span> <span class="hljs-built_in">test</span>:user:2 <span class="hljs-string">&#x27;&#123;&quot;id&quot;: 2, &quot;name&quot;: lisi, &quot;age&quot;: 21&#125;&#x27;</span><br><br>// Hash类型<br>// Hash结构可将对象中的每个字段独立存储(field对应key), 从而针对单个字段做CRUD<br>// HSET e.g hset <span class="hljs-built_in">test</span>:user:3 name lucy<br>//          hset <span class="hljs-built_in">test</span>:user:3 age 21<br>// HMSET e.g hset <span class="hljs-built_in">test</span>:user:3 name lucy age 21<br>// HGET e.g hget <span class="hljs-built_in">test</span>:user:3 name<br>// HMSET e.g hset <span class="hljs-built_in">test</span>:user:3 name age<br>// HGETALL e.g hgetall <span class="hljs-built_in">test</span>:user:3 // 获取key和value<br>// HKEYS e.g hkeys <span class="hljs-built_in">test</span>:user:3 // 获取key<br>// HVALS e.g hvals <span class="hljs-built_in">test</span>:user:3 // 获取value<br>// HINCRBY e.g hincrby <span class="hljs-built_in">test</span>:user:3 age 2 (注: 2也可以换成-2)<br>// HSETNX e.g hsetnx <span class="hljs-built_in">test</span>:user:3 score 10 (判断的是field是否存在, 不存在则执行)<br><br>// List类型<br>// Redis中的List类型与与Java中的LinkedList类似, 可看作是一个双向链表结构<br>// 特点: 有序; 元素可以重复; 插入与删除快; 查询速度一般<br>// LPUSH key element: 在列表左侧插入一个或多个元素 e.g lpush user 1 2 3 (1, 2, 3为value)<br>// LPOP key: 移除并返回列表左侧第一个元素, 若没有则返回null e.g lpop user 1<br>// RPUSH key element: 在列表右侧插入一个或多个元素<br>// RPOP key: 移除并返回列表右侧第一个元素, 若没有则返回null<br>// LRANGE key start end: 返回一段范围内的所有元素 e.g lrange user 1 2<br>// BLPOP和BRPOP: 与LPOP和RPOP类似, 但在没有元素时会等待指定时间, 而不是直接返回null<br>// e.g blpop user 100 (等待时长为100s)<br><br>// Set类型<br>// Redis中的Set类型与Java中的HashSet类似, 可看作是一个value为null的HashMap<br>// 特点: 无序, 元素不可重复, 查找速度快, 支持交集、并集、差集<br>// SADD key member: 在<span class="hljs-built_in">set</span>中插入一个或多个元素<br>// SREM key member: 移除<span class="hljs-built_in">set</span>中的指定元素<br>// SCARD key: 返回<span class="hljs-built_in">set</span>中的元素个数<br>// SISMEMBER key member: 判断一个元素是否在<span class="hljs-built_in">set</span>中<br>// SMEMBERS: 获取<span class="hljs-built_in">set</span>中的所有元素<br>// SINTER key1 key2: 求key1与key2的交集<br>// SDIFF key1 key2: 求key1与key2的差集<br>// SUNION key1 key2: 求key1与key2的并集<br><br>// SortedSet类型<br>// Redis中的SortedSet与Java中的TreeSet类似, 但底层数据结构差别很大<br>// SortedSet中的每一个元素有一个score属性, 可基于score属性对元素排序<br>// 特点: 可排序, 元素不可重复; 查询速度快<br>// ZADD key score member: 添加一个或多个元素到sorted <span class="hljs-built_in">set</span>, 若已存在则更新其score值<br>// e.g ZADD students 99 Jack 99 Lucy<br>// ZREM key member: 移除sorted <span class="hljs-built_in">set</span>中的指定元素<br>// ZSCORE key member: 获取sorted <span class="hljs-built_in">set</span>中的指定元素的score值<br>// ZRANK key member: 获取sorted <span class="hljs-built_in">set</span>中的指定元素的排名 // 默认升序, ZRERANK表示降序<br>// e.g ZRANK students Rose<br>// ZCARD key: 获取sorted <span class="hljs-built_in">set</span>中的元素个数<br>// ZCOUNT key min max: 获取score值在指定范围内的所有元素个数<br>// ZINCRBY key increment member: 使sorted <span class="hljs-built_in">set</span>中的指定元素按照指定步长自增<br>// e.g ZINCRBY students 2 Lucy<br>// ZRANGE key min max: 按照score排序后, 获取指定排名范围内的所有元素<br>// e.g ZREVRANGE students 0 2<br>// ZRANGEBYSCORE key min max: 按照score排序后, 获取指定score范围内的所有元素<br>// e.g ZRANGEBYSCORE students 0 80<br>// ZDIFF、ZINTER、ZUNION: 获取差集、交集、并集<br></code></pre></td></tr></table></figure><p>单线程, 每个命令具备原子性; 低延迟, 速度快(基于内存, IO多路复用;良好的编码); 支持数据持久化; 支持主从集群, 分片集群;支持多语言客户端</p><ul><li>MongoDB: 文档类型的非关系型数据库; 支持的数据结构非常松散,是一种类似于JSON的格式, 叫BSON, 可存储比较复杂的数据类型</li></ul><p>table→collection, row→document, column→field(数据字段/域)</p><p>应用场景: 对数据库高并发读写; 对海量数据高效存储与访问;对数据库高可扩展性的要求</p><p>下载的package: MSI: 需要安装; ZIP: 解压缩即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 在Windows系统<br>// 命令行启动<br>mongod --dbpath=..\\data\\db // 此处data\\db为存储数据库的目录<br>// 配置文件启动<br>// 在解压目录下新建config文件夹, 文件夹中新建配置文件mongod.conf:<br>storage:<br>dbPath:..\\data\\db // 此处需改写为绝对路径<br>// 启动<br>mongod -f ../config/mongod.conf<br>// 或 mongod --config ../config/mongod.conf<br>// 此处mongod对应的应该是该目录下的mongod.exe文件<br><br>// 启动后, 连接MongoDB数据库(注意此时启动的cmd窗口不能关, 需新开一个cmd窗口)<br>// 连接本地的MongoDB数据库<br>mongo // 或 mongo --host=127.0.0.1 --port=27017<br>// 连接成功后测试: show dbs 或 show databases<br><br>// 也可通过Compass(MongoDB的图形化界面)进行连接等操作<br>&lt;https://www.mongodb.com/zh-cn/products/tools/compass&gt;<br><br>// 在Linux系统<br>// 配置文件启动<br>// 新建数据存储目录<br><span class="hljs-built_in">mkdir</span> -p mongodb/single/data/db<br>// 新建日志存储目录<br><span class="hljs-built_in">mkdir</span> -p mongodb/single/log<br>// 新建并修改配置文件<br>vi mongodb/single/mongod.conf<br>systemLog:<br>destination: file // 日志输出的目标指定为文件<br>path: <span class="hljs-string">&quot;mongodb/single/log/mongod.log&quot;</span><br>logAppend: <span class="hljs-literal">true</span> // 将新条目添加到现有日志文件的末尾<br>storage:<br>dbPath: <span class="hljs-string">&quot;mongodb/single/data/db&quot;</span><br>journal:<br>enabled: <span class="hljs-literal">true</span> // 启用持久性日志以确保数据文件的可恢复<br>processManagement:<br>fork: <span class="hljs-literal">true</span> // 启用在后台运行mongod进程的守护进程模式<br>net:<br>bindIp: localhost, ... // 服务实例绑定的IP<br>// 对于远程连接, 绑定的不是远程主机的IP, 而是云服务器所在局域网的IP<br>// 查看所在局域网的IP: ifconfig命令, 第二行<br>port: 27017<br><br>// 启动后查看进程<br>ps -ef // 显示系统中所有正在运行的进程的详细信息<br>ps -ef | grep mongod // 显示系统中所有与mongod相关的正在运行的进程<br><br>// 若连接不上, 可能是防火墙未关闭<br>systemctl status firewalld // 查看防火墙状态<br>systemctl stop firewalld // 临时关闭防火墙<br>systemctl disabled firewalld // 禁止启动防火墙<br><br>// 关闭<br>// 方式1: 直接<span class="hljs-built_in">kill</span>进程<br>// 方式2: 标准关闭方式, 数据不容易出错<br>mongo --port=27017 // 客户端登录, 通过localhost<br>use admin // 切换到admin库<br>db.shutdownServer() // 关闭服务<br>// 创建/切换数据库, 新建的数据库位于内存而不是磁盘(持久化)<br>use ...<br>// 查看当前数据库<br>db<br><br>// 有特殊作用的数据库<br>admin: <span class="hljs-string">&quot;root&quot;</span>数据库, 若将一个用户添加到这个数据库, 这个用户可以继承所有数据库的权限<br>// 一些特定的服务器端命令也只能在这个服务器端运行<br><span class="hljs-built_in">local</span>: 用来存储限于本地单台服务器的任意集合, 永远不会被复制<br>config: 当Mongo用于分片设置时, config数据库在内部使用, 用于保存分片的相关信息<br><br>db.dropDatabase() // 删除数据库<br>// 创建集合<br>db.createCollection(<span class="hljs-string">&quot;mycollection&quot;</span>) // 显式<br>// 查询集合<br>show collections<br>// 删除集合<br>db.mycollection.drop() // db.集合名称.drop()<br>// 文档插入<br>db.mycomment.insert(<br>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;userid&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;datetime&quot;</span>: new Date(),<br> <span class="hljs-string">&quot;likenum&quot;</span>: NumberInt(5), <span class="hljs-string">&quot;state&quot;</span>: null&#125;<br>)<br>// 若mycomment集合不存在, 则会隐式创建<br>// mongo中的数字默认为double, 若要存储整型则需使用NumberInt(...)<br>// 当前日期: new Date()<br>// 若插入数据没有指定_id, 则会自动生成主键值<br><br>// 查询文档<br>db.comment.find()<br>// 多条文档插入<br>db.mycomment.insert(<br>[&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;userid&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;datetime&quot;</span>: new Date(),<br> <span class="hljs-string">&quot;likenum&quot;</span>: NumberInt(1), <span class="hljs-string">&quot;state&quot;</span>: null&#125;,<br> &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zhangsan1&quot;</span>, <span class="hljs-string">&quot;userid&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;datetime&quot;</span>: new Date(),<br> <span class="hljs-string">&quot;likenum&quot;</span>: NumberInt(2), <span class="hljs-string">&quot;state&quot;</span>: null&#125;,<br> &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;zhangsan2&quot;</span>, <span class="hljs-string">&quot;userid&quot;</span>: <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-string">&quot;datetime&quot;</span>: new Date(),<br> <span class="hljs-string">&quot;likenum&quot;</span>: NumberInt(3), <span class="hljs-string">&quot;state&quot;</span>: null&#125;]<br>)<br>db.mycomment.find(&#123;userid: <span class="hljs-string">&quot;10&quot;</span>&#125;)<br>db.mycomment.findOne(&#123;userid: <span class="hljs-string">&quot;10&quot;</span>&#125;)<br>// 查询结果只显示name, userid<br>db.mycomment.find(&#123;userid: <span class="hljs-string">&quot;10&quot;</span>&#125;, &#123;name: 1, userid: 1&#125;)<br></code></pre></td></tr></table></figure><p>SQL(关系型数据库): 结构化; 关联的; 标准的SQL查询; 存储在磁盘</p><p>NoSQL(非关系型数据库): 非结构化(key-value; document; graph);非关联的(关联需要自己定义); 非SQL查询; 存储在内存</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js Basics (2)</title>
    <link href="/2023/12/03/Node.js%20Basics%20(2)/"/>
    <url>/2023/12/03/Node.js%20Basics%20(2)/</url>
    
    <content type="html"><![CDATA[<ul><li>JSONP: 浏览器端通过&lt;script&gt;标签的src属性, 请求服务器上的数据;服务器返回一个函数的调用</li></ul><p>必须在配置CORS中间件之前声明JSONP的接口</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/jsonp&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> funcName = req.<span class="hljs-property">query</span>.<span class="hljs-property">callback</span> <span class="hljs-comment">// 得到函数名称</span><br><span class="hljs-keyword">const</span> data = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125; <span class="hljs-comment">// 定义要发送给客户端的数据对象</span><br><span class="hljs-keyword">const</span> scriptStr = <span class="hljs-string">&quot;$&#123;funcName&#125;($&#123;JSON.stringify(data)&#125;)&quot;</span><br>res.<span class="hljs-title function_">send</span>(scriptStr)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>mysql模块</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm init -y<br>npm install mysql<br><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>)<br><span class="hljs-keyword">const</span> db = mysql.<span class="hljs-title function_">createPool</span>(&#123;<br><span class="hljs-attr">host</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br><span class="hljs-attr">user</span>: <span class="hljs-string">&quot;zyliang&quot;</span>,<br><span class="hljs-attr">password</span>: <span class="hljs-string">&quot;123123123&quot;</span>,<br><span class="hljs-attr">database</span>: <span class="hljs-string">&quot;my_db_01&quot;</span><br>&#125;)<br><br><span class="hljs-comment">// 调用db.query()函数, 指定要执行的SQL语句</span><br><span class="hljs-comment">// select</span><br>db.<span class="hljs-title function_">query</span>(<span class="hljs-string">&quot;select * from users&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results)<br>&#125;)<br><span class="hljs-comment">// insert</span><br><span class="hljs-keyword">const</span> user = &#123;<span class="hljs-attr">username</span>: <span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;test2&quot;</span>&#125;<br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;insert into users (username, password) values (?, ?)&quot;</span><br>db.<span class="hljs-title function_">query</span>(sqlStr, [user.<span class="hljs-property">username</span>, user.<span class="hljs-property">password</span>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br><span class="hljs-keyword">if</span>(results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;插入数据成功&quot;</span>)<br>&#125;<br>&#125;)<br><span class="hljs-comment">// 简化写法</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;insert into users set ?&quot;</span><br>db.<span class="hljs-title function_">query</span>(sqlStr, user, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br><span class="hljs-keyword">if</span>(results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;插入数据成功&quot;</span>)<br>&#125;<br>&#125;)<br><span class="hljs-comment">// update</span><br><span class="hljs-keyword">const</span> user = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;test2&quot;</span>&#125;<br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;update users set username=?, password=? where id=?&quot;</span><br>db.<span class="hljs-title function_">query</span>(sqlStr, [user.<span class="hljs-property">username</span>, user.<span class="hljs-property">password</span>, user.<span class="hljs-property">id</span>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br><span class="hljs-keyword">if</span>(results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新数据成功&quot;</span>)<br>&#125;<br>&#125;)<br><span class="hljs-comment">// 简化写法</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;update users set ? where id=?&quot;</span><br>db.<span class="hljs-title function_">query</span>(sqlStr, [user, user.<span class="hljs-property">id</span>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br><span class="hljs-keyword">if</span>(results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新数据成功&quot;</span>)<br>&#125;<br>&#125;)<br><span class="hljs-comment">// delete</span><br><span class="hljs-keyword">const</span> sqlStr = <span class="hljs-string">&quot;delete from users where id=?&quot;</span><br>db.<span class="hljs-title function_">query</span>(sqlStr, <span class="hljs-number">7</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br><span class="hljs-keyword">if</span>(results.<span class="hljs-property">affectedRows</span> === <span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;删除数据成功&quot;</span>)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>web开发模式:</li></ul><p>基于服务器渲染(传统): 服务器发送给客户端的HTML页面,是在服务器通过字符串拼接动态生成的; 用Session认证机制来进行身份认证</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> user = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;<br><span class="hljs-keyword">const</span> html = <span class="hljs-string">&quot;&lt;h1&gt;姓名: $&#123;user.name&#125;, 年龄: $&#123;user.age&#125;&lt;/h1&gt;&quot;</span><br>res.<span class="hljs-title function_">send</span>(html)<br>&#125;)<br></code></pre></td></tr></table></figure><p>基于前后端分离(新型): 后端只负责提供API接口, 前端使用Ajax调用接口;用JWT认证机制来进行身份认证</p><p>HTTP协议的无状态性: 每次HTTP请求都是独立的,服务器不会保留每次HTTP请求的状态</p><p>Cookie: 存储在用户浏览器中的一段不超过4KB的字符串, 有1个名称, 1个值,几个可选属性(关于有效期, 安全性, 使用范围),类似于现实中会员卡身份认证方式</p><p>Cookie特性: 自动发送(客户端发起请求时); 域名独立; 有过期时限;4KB限制</p><p>客户端第一次请求服务器时, 服务器通过响应头的形式,向客户端发送一个身份验证相关的Cookie,客户端会自动将Cookie保存在浏览器中; 当客户端再次请求服务器,浏览器会自动将身份验证相关的Cookie通过请求头的形式发送给服务器,服务器即可验证客户端的身份</p><ul><li>express-session中间件: 使用session认证</li></ul><p>局限性: Cookie不支持跨域访问, 前端跨域请求后端接口时需要额外配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm install express-session<br><span class="hljs-keyword">var</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-session&quot;</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(&#123;<br><span class="hljs-attr">secret</span>: <span class="hljs-string">&quot;keyboard cat&quot;</span>, <span class="hljs-comment">// 可为任意字符串</span><br><span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span><br>&#125;))<br><span class="hljs-comment">// express-session中间件配置成功后, 即可通过req.session来访问和使用session对象</span><br><span class="hljs-comment">// 从而存储用户的关键信息</span><br><br><span class="hljs-comment">// 登录的API接口</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span> !== <span class="hljs-string">&quot;admin&quot;</span> || req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span> !== <span class="hljs-string">&quot;123123123&quot;</span>)&#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">status</span>: <span class="hljs-number">1</span>, msg=<span class="hljs-string">&quot;登陆失败&quot;</span>&#125;)<br>&#125;<br>req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span> = req.<span class="hljs-property">body</span><br>req.<span class="hljs-property">session</span>.<span class="hljs-property">islogin</span> = <span class="hljs-literal">true</span><br>res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;登陆成功&quot;</span>&#125;)<br>&#125;)<br><span class="hljs-comment">// 获取用户姓名的接口</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/username&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(!req.<span class="hljs-property">session</span>.<span class="hljs-property">islogin</span>)&#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">status</span>: <span class="hljs-number">1</span>, msg=<span class="hljs-string">&quot;fail&quot;</span>&#125;)<br>&#125;<br>res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-attr">username</span>: req.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">username</span>&#125;)<br>&#125;)<br><span class="hljs-comment">// 退出登录的接口</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/logout&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>()<br>res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;退出登陆成功&quot;</span>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>JWT(JSON Web Token): 目前最流行的跨域认证解决方案</li></ul><p>JWT由三部分组成: Header(头部), Payload(有效载荷,即用户信息经过加密后生成的字符串), Signature(签名),三者之间通过”.”进行分隔</p><p>使用: 客户端收到服务器返回的JWT后,通常会将其存储在localStorage或sessionStorage中</p><p>之后客户端每次与服务器通信, 都要带上这个JWT字符串进行身份验证,最好是把JWT放在HTTP请求头的Authorization字段中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Authorization</span>: <span class="hljs-title class_">Bearer</span> &lt;token&gt;<br>npm install jsonwebtoken express-jwt<br><span class="hljs-comment">// jsonwebtoken用于生成JWT字符串</span><br><span class="hljs-comment">// express-jwt用于将JWT字符串解析还原成JSON对象</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>)<br><span class="hljs-keyword">const</span> expressJWT = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express-jwt&quot;</span>)<br><span class="hljs-comment">// 为防止JWT字符串在网络传输过程中被破解, 需要专门定义一个用于加密和解密的secret密钥</span><br><span class="hljs-comment">// 生成JWT字符串时需要用secret密钥对用户信息进行加密</span><br><span class="hljs-comment">// 当把JWT字符串解析还原成JSON对象时需要使用secret密钥进行解密</span><br><br><span class="hljs-comment">// 登陆成功后, 调用jwt.sign()方法来生成JWT字符串, 并通过token属性发送给客户端</span><br><span class="hljs-keyword">const</span> secretKey = <span class="hljs-string">&quot;zyliang666&quot;</span><br><span class="hljs-comment">// 参数: 用户的信息对象, 加密的密钥, 配置对象</span><br><span class="hljs-keyword">const</span> tokenStr jwt.<span class="hljs-title function_">sign</span>(&#123;<span class="hljs-attr">username</span>: userinfo.<span class="hljs-property">username</span>&#125;, secretKey, &#123;<span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&quot;1h&quot;</span>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br>res.<span class="hljs-title function_">send</span>(&#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&quot;登陆成功&quot;</span>,<br><span class="hljs-attr">token</span>: jwt.<span class="hljs-title function_">sign</span>(&#123;<span class="hljs-attr">username</span>: userinfo.<span class="hljs-property">username</span>&#125;, secretKey, &#123;<span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&quot;1h&quot;</span>&#125;)<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 将JWT字符串还原为JSON对象</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">expressJWT</span>(&#123;<span class="hljs-attr">secret</span>: secretKey&#125;)).<span class="hljs-title function_">unless</span>(&#123;<span class="hljs-attr">path</span>: [<span class="hljs-regexp">/^\\/</span>api\\<span class="hljs-comment">//]&#125;)</span><br><span class="hljs-comment">// 以&quot;/api&quot;开头的不需要访问权限; 以&quot;/my&quot;开头的需要访问权限</span><br><span class="hljs-comment">// 配置express-jwt中间件后, 就能把解析出来的用户信息挂载到req.user属性上</span><br><span class="hljs-comment">// 可通过如下方式获取用户信息</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/admin/getinfo&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">user</span>)<br>res.<span class="hljs-title function_">send</span>(&#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&quot;获取用户信息成功&quot;</span>,<br><span class="hljs-attr">data</span>: req.<span class="hljs-property">user</span>,<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 全局错误处理中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;UnauthorizedError&quot;</span>)&#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(&#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">401</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&quot;无效token&quot;</span>,<br>&#125;)<br>&#125;<br>res.<span class="hljs-title function_">send</span>(&#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">500</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&quot;未知错误&quot;</span><br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>AJAX: 异步的JS和XML; 可以在浏览器中向服务器发送异步请求;优势为不需要刷新就能获取数据</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">// req是对请求报文的封装, res是对响应报文的封装</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/server&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 设置响应头, 允许跨域</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><span class="hljs-comment">// 设置响应体</span><br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;hello ajax&quot;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/server&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 设置响应头, 允许跨域</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><span class="hljs-comment">// 设置响应体</span><br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;hello ajax post&quot;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/json-server&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 设置响应头, 允许跨域</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br><span class="hljs-comment">// 响应头</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br><span class="hljs-comment">// 响应一个数据</span><br><span class="hljs-keyword">const</span> data = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;mytest&quot;</span><br>&#125;;<br><span class="hljs-keyword">let</span> str = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data);<br><span class="hljs-comment">// 设置响应体</span><br>res.<span class="hljs-title function_">send</span>(str);<br>&#125;)<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/jquery-server&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br><span class="hljs-comment">// res.send(&quot;hello jquery ajax&quot;);</span><br><span class="hljs-keyword">const</span> data = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>&#125;)<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/axios-server&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br><span class="hljs-keyword">const</span> data = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>&#125;)<br>...<br>&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByTagName</span>(<span class="hljs-string">&quot;button&quot;</span>)[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;result&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// const result = document.querySelector(&quot;#result&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&quot;test&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 创建对象</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 初始化, 设置请求方法和url</span></span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;&lt;http://127.0.0.1:8000/server&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 解决ajax的ie缓存问题</span></span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;&lt;http://127.0.0.1:8000/server?t=&gt;&quot;</span> + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 设置请求参数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// xhr.open(&quot;GET&quot;, &quot;&lt;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&gt;&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 发送</span></span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-title function_">send</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 事件绑定, 处理服务器返回的结果</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// readystate是xhr对象中的属性, 表示状态0 1 2 3 4</span></span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123; <span class="hljs-comment">// 此时服务器端已返回所有结果</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 200-299均为成功</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 响应行</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">status</span>); <span class="hljs-comment">// 状态码</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">statusText</span>); <span class="hljs-comment">// 状态字符串</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-title function_">getAllResponseHeaders</span>()); <span class="hljs-comment">// 所有响应头</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">response</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 设置result的文本</span></span></span><br><span class="language-javascript"><span class="language-xml">result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>; <span class="hljs-comment">// 即hello ajax</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">result.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;mouseover&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;&lt;http://127.0.0.1:8000/server&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-title function_">send</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// xhr.send(&quot;a=100&amp;b=200&amp;c=300&quot;) // Request Payload</span></span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>; <span class="hljs-comment">// 即hello ajax post</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 绑定键盘按下事件</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;&lt;http://127.0.0.1:8000/json-server&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-title function_">send</span>();</span></span><br><span class="language-javascript"><span class="language-xml">xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// result.innerHTML = xhr.response;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 手动对数据进行转换</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// let data = JSON.parse(xhr.response);</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(data);</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// result.innerHTML = data.name;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 自动转换</span></span></span><br><span class="language-javascript"><span class="language-xml">result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>.<span class="hljs-property">name</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;&lt;http://127.0.0.1:8000/jquery-server&gt;&quot;</span>, &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;&lt;http://127.0.0.1:8000/jquery-server&gt;&quot;</span>, &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;, <span class="hljs-string">&quot;json&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&lt;http://127.0.0.1:8000/jquery-server&gt;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 成功的回调</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 超时时间</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">timeout</span>: <span class="hljs-number">2000</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 失败的回调</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;出错&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 头信息</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">headers</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">c</span>: <span class="hljs-number">300</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">d</span>: <span class="hljs-number">400</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;button&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/axios-server&quot;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// url</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">params</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">vip</span>: <span class="hljs-number">7</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 请求头参数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">headers</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>: <span class="hljs-number">20</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/axios-server&quot;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;zyliang&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">password</span>: <span class="hljs-string">&quot;zyliang666&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;, &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">params</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">vip</span>: <span class="hljs-number">7</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">headers</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>: <span class="hljs-number">20</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">axios</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/axios-server&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">params</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">vip</span>: <span class="hljs-number">7</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">headers</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>: <span class="hljs-number">20</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;zyliang&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">password</span>: <span class="hljs-string">&quot;zyliang666&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">status</span>); <span class="hljs-comment">// 响应状态码</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">statusText</span>); <span class="hljs-comment">// 响应状态字符串</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">headers</span>); <span class="hljs-comment">// 响应状态头</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>); <span class="hljs-comment">// 响应状态体</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">...</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb Basics</title>
    <link href="/2023/11/24/JavaWeb%20Basics/"/>
    <url>/2023/11/24/JavaWeb%20Basics/</url>
    
    <content type="html"><![CDATA[<p>数据库驱动(驱动jar包, 下载后放到项目下的lib目录并添加到libraries):对于JDBC中定义接口(一套操作所有关系型数据库的规则)的实现类JavaWebBasics</p><p>创建一个Empty Project; 在Project Structure中设置Project SDK和Projectlanguage level; 在Project Structure中Add New Module, 然后选中Java即可;新建lib目录, 将jar包放在该目录, 右键jar包, 选中Add as Library,在level处选中Module Library</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注册驱动</span><br><span class="hljs-comment">// MySQL5之后的驱动包, 可以省略注册驱动的步骤</span><br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><span class="hljs-comment">// 获取连接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zyliang&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test123&quot;</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><span class="hljs-comment">// 定义SQL语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money=20000 where id=1&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money=20000 where id=2&quot;</span>;<br><span class="hljs-comment">// 获取执行SQL的对象</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-comment">// 预编译的执行SQL的对象, 防止注入</span><br><span class="hljs-comment">// PreparedStatement stmt = conn.prepareStatement(sql);</span><br><span class="hljs-comment">// 执行存储过程的对象</span><br><span class="hljs-comment">// CallableStatement stmt = conn.prepareCall(sql);</span><br><span class="hljs-comment">// 执行SQL</span><br><span class="hljs-comment">// 开启事务--</span><br><span class="hljs-keyword">try</span>&#123;<br>conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql); <span class="hljs-comment">// 返回的count为执行语句受影响的行数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql2);<br><span class="hljs-comment">// 处理返回结果</span><br>System.out.println(count);<br>System.out.println(count2);<br><span class="hljs-comment">// 提交事务--</span><br>conn.commit();<br>&#125;<span class="hljs-keyword">catch</span>(Exception throwables)&#123;<br>conn.rollback();<br>throwables.printStackTrace();<br>&#125;<br><span class="hljs-comment">// 释放资源</span><br>stmt.close();<br>conn.close();<br><span class="hljs-comment">// 开启事务</span><br>setAutoCommit(<span class="hljs-type">boolean</span> autoCommit) <span class="hljs-comment">// true为自动提交, false为手动提交</span><br><span class="hljs-comment">// 提交事务</span><br>commit()<br><span class="hljs-comment">// 回滚事务</span><br>rollback()<br><span class="hljs-comment">// 执行DML(修改表)、DDL语句(修改库)</span><br>executeUpdate(sql) <span class="hljs-comment">// 返回int</span><br><span class="hljs-comment">// 执行DQL(查询表)语句</span><br>executeQuery(sql) <span class="hljs-comment">// 返回ResultSet</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<br>&#125;<br><br>Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zyliang&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test123&quot;</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from account&quot;</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>List&lt;Account&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br><span class="hljs-keyword">while</span>(rs.next())&#123; <span class="hljs-comment">// 光标向下移动一行, 并判断当前行是否有数据</span><br><span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> rs.getDouble(<span class="hljs-string">&quot;money&quot;</span>);<br>account.setId(id);<br>account.setName(name);<br>account.setMoney(money);<br>list.add(account);<br>&#125;<br><br>System.out.println(list);<br><br><span class="hljs-comment">// 释放资源</span><br>rs.close();<br>stmt.close();<br>conn.close();<br></code></pre></td></tr></table></figure><p>目录文件: application.properties, sql.jar;可能要修改application.properties文件中的username和password</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">jar包启动: java -jar .\\sql.jar<br><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1&quot;</span><br><span class="hljs-comment">// 通过设置useServerPrepStmts=true开启预编译功能</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mydb1?useSSL=false&amp;useServerPrepStmts=true&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zyliang&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test123&quot;</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-comment">// sql注入: &quot;&#x27;&#x27; or &#x27;1&#x27; = &#x27;1&#x27;&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb_user where username = &#x27;&quot;</span>+name+<span class="hljs-string">&quot;&#x27; and password = &#x27;&quot;</span>+pwd+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-comment">// 防止sql注入</span><br><span class="hljs-comment">//String sql = &quot;select * from tb_user where username = ? and password = ?&quot;;</span><br><span class="hljs-comment">// PreparedStatement pstmt = conn.prepareStatement(sql); // 预编译SQL性能更高</span><br><span class="hljs-comment">// pstmt.setString(1, name);</span><br><span class="hljs-comment">// pstmt.setString(2, pwd);</span><br><span class="hljs-comment">// pstmt.executeQuery();</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br><span class="hljs-keyword">if</span>(rs.next())&#123;<br>System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>&#125;<br><br>rs.close();<br>stmt.close();<br>conn.close();<br><br><span class="hljs-comment">// 配置MySQL执行日志(重启MySQL服务后生效) (通过services.msc)</span><br>log-output=FILE<br>general-log=<span class="hljs-number">1</span><br>general_log_file=<span class="hljs-string">&quot;D:\\mysql.log&quot;</span><br>slow-query-log=<span class="hljs-number">1</span><br>slow_query_log_file=<span class="hljs-string">&quot;D:\\mysql_slow.log&quot;</span><br>long_query_time=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>数据库连接池</li></ul><p>优点: 资源重用; 提升系统响应速度;避免数据库连接遗漏(设置了最大空闲时间)</p><p>标准接口: DataSource</p><p>Connection getConnection()</p><p>常用的数据库连接池: DBCP; C3P0; Druid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.导入jar包(e.g druid-1.1.12.jar)</span><br><span class="hljs-comment">// 2.定义配置文件</span><br><span class="hljs-comment">// druid.properties, 内容如下</span><br><span class="hljs-comment">// driverClassName=com.mysql.jdbc.Driver</span><br><span class="hljs-comment">// url=jdbc:mysql://127.0.0.1:3306/mydb1</span><br><span class="hljs-comment">// username=zyliang</span><br><span class="hljs-comment">// password=123123</span><br><span class="hljs-comment">// initialSize=5 // 初始化连接数量</span><br><span class="hljs-comment">// maxActive=10 // 最大连接数</span><br><span class="hljs-comment">// maxWait=3000 // 最大等待时间</span><br><span class="hljs-comment">// 3.加载配置文件</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;jdbc-demo/src/druid.properties&quot;</span>));<br><span class="hljs-comment">// 4.获取数据库连接池对象</span><br><span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br><span class="hljs-comment">// 5.获取连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>System.out.println(connection);<br></code></pre></td></tr></table></figure><ul><li>Maven: 专门用于管理和构建Java项目的工具</li></ul><p>poe.xml: Maven的配置文件</p><p>提供了一套标准化的项目结构、构建流程(编译、测试、打包、发布)、依赖管理机制</p><p>不同IDE之间创建的项目结构不一样</p><p>main/java: 源代码Java文件目录; main/resources: 源代码配置文件目录</p><p>Run Maven → compile / package …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过Maven来导入jar包</span><br>&lt;dependencies&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;mysql&lt;groupId&gt;<br>&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.32</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><p>本地仓库: 本机上的一个目录</p><p>中央仓库: 由Maven团队维护的全球唯一的仓库</p><p>地址: https://repo1.maven.org/maven2/</p><p>远程仓库(私服): 一般由公司团队搭建的私有仓库</p><p>若搭建远程仓库, 则jar包的查找顺序变为: 本地仓库→远程仓库→中央仓库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Maven安装配置</span><br><span class="hljs-comment">// 1.解压apache-maven-3.6.1.rar (或.zip)</span><br><span class="hljs-comment">// 解压完成即安装成功</span><br><span class="hljs-comment">// bin目录: 一些二进制的可执行文件; boot: Maven需要用到的一个jar包</span><br><span class="hljs-comment">// conf目录: 一些配置文件; lib: Maven依赖的一些jar包</span><br><span class="hljs-comment">// 2. 配置环境变量MAVEN_HOME为安装路径的bin目录</span><br><span class="hljs-comment">// 新建系统变量MAVEN_HOME(变量名), 变量值为apache-maven-3.6.1的路径</span><br><span class="hljs-comment">// 编辑环境变量, 新建%MAVEN_HOME%\\bin</span><br><span class="hljs-comment">// 在cmd在查看版本: mvn -version</span><br><span class="hljs-comment">// 3.配置本地仓库: 修改conf/settings.xml中的&lt;localRepository&gt;为一个指定目录</span><br><span class="hljs-comment">// 4.配置阿里云私服: 修改conf/settings.xml中的&lt;mirror&gt;标签, 为其添加如下的子标签:</span><br>&lt;mirror&gt;<br>&lt;id&gt;alimaven&lt;/id&gt;<br>&lt;name&gt;aliyun maven&lt;/name&gt;<br>&lt;url&gt;&lt;http:<span class="hljs-comment">//maven.aliyun.com/nexus/content/groups/public/&gt;&lt;/url&gt;</span><br>&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>&lt;/mirror&gt;<br><span class="hljs-comment">// 常用命令 (maven-project目录下有src目录和poe.xml文件)</span><br>mvn compile<br><span class="hljs-comment">// 执行后在maven-project目录下会出现一个target目录, 若为初次执行, 则还会下载插件</span><br>mvn clean<br><span class="hljs-comment">// 执行后会删除target目录</span><br>mvn <span class="hljs-keyword">package</span><br><span class="hljs-comment">// 执行后在maven-project目录下会出现一个target目录, 目录下有项目内容的jar包</span><br>mvn test<br><span class="hljs-comment">// 执行test目录下的代码</span><br>mvn install<br><span class="hljs-comment">// 将当前项目的jar包安装到本地仓库</span><br><br><span class="hljs-comment">// Maven对项目构建的生命周期划分为3套</span><br><span class="hljs-comment">// clean(清理工作): pre-clean, clean, post-clean</span><br><span class="hljs-comment">// default(核心工作): compile, test, package, install</span><br><span class="hljs-comment">// site(产生报告, 发布站点): pre-site, site, post-site</span><br></code></pre></td></tr></table></figure><p>IDEA配置Maven: File→setting→搜索Maven→选择Maven中的Maven homepath、User settings file→Apply</p><p>Maven坐标(资源的唯一标识)的主要组成:</p><p>groupId: 当前Maven项目隶属组织的名称</p><p>artifactId: 当前Maven项目的名称</p><p>version: 当前项目版本号</p><p>创建Maven项目: Project Structure中选中Modules→选择Maven项目,即可创建</p><p>导入Maven项目: 点击Maven界面中的”+“(Add Maven Projects),找到需要导入的项目的poe.xml文件, 双击即可导入</p><p>若没有Maven界面: View→Appearance→Tool Window Bars</p><p>好用的Maven插件: Maven Helper</p><p>配置自动生效: File→Settings→Build Tools→Any changes</p><p>导入本地仓库jar包的快捷方式: 在poe.xml文件中按Alt+Insert</p><ul><li>JavaEE的三层架构:表现层、业务层、持久层(负责将数据保存到数据库的那一层代码)</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js Basics (1)</title>
    <link href="/2023/11/20/Node.js%20Basics%20(1)/"/>
    <url>/2023/11/20/Node.js%20Basics%20(1)/</url>
    
    <content type="html"><![CDATA[<p>在Node.js环境中执行JavaScript代码: 在命令行中输入: node js文件</p><ul><li>fs: Node.js中提供的用于操作文件的模块</li></ul><p>fs.readFile(): 读取指定文件中的内容</p><p>fs.writeFile(): 向指定的文件中写入内容</p><p>导入fs模块: const fs = require(’fs’)</p><ul><li>fs.readFile()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./test.txt&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-----&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr)<br>&#125;)<br><span class="hljs-comment">// function为回调函数, err为读取失败的结果(若读取成功则为null), </span><br><span class="hljs-comment">// dataStr为读取成功的结果(若读取成功则为undefined)</span><br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./test.txt&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, dataStr</span>)&#123;<br><span class="hljs-keyword">if</span>(err)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;读取失败&quot;</span> + err.<span class="hljs-property">message</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;读取成功&quot;</span> + dataStr)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>fs.writeFile()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&quot;./test.txt&quot;</span>, <span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-comment">// 若成功写入, err为null</span><br><span class="hljs-keyword">if</span>(err)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;写入失败&quot;</span> + err.<span class="hljs-property">message</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;写入成功&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>path: Node.js提供的用于处理路径的模块</li></ul><p>path.join(): 将多个路径片段拼接成一个完整的路径字符串</p><p>path.basename(): 将文件名从路径字符串中解析出来</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-comment">// &quot;./test.txt&quot; -&gt; path.join(__dirname, &quot;test.txt&quot;)</span><br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&quot;/a/b/c/index.html&quot;</span><br><span class="hljs-keyword">var</span> fullname = path.<span class="hljs-title function_">basename</span>(fpath)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fullname) <span class="hljs-comment">// index.html</span><br><span class="hljs-keyword">var</span> nameWithoutExt = path.<span class="hljs-title function_">basename</span>(fpath, <span class="hljs-string">&quot;.html&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameWithoutExt) <span class="hljs-comment">// index</span><br></code></pre></td></tr></table></figure><ul><li>http: Node.js提供的用来创建web服务器的模块</li></ul><p>通过http.createServer()可以把一台普通的电脑变成一台web服务器</p><p>服务器与普通电脑的区别: 服务器上安装了web服务器软件(IIS,Apache等)</p><p>将本机当作服务器进行访问: 127.0.0.1 (对应的域名为localhost)</p><p>url在的80端口可以被省略</p><ul><li>创建基本的web服务器</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 导入http模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>)<br><span class="hljs-comment">// 创建web服务器实例</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><span class="hljs-comment">// 为服务器实例绑定request事件, 监听客户端的请求</span><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123; <span class="hljs-comment">// 当服务器被访问时触发</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Someone visits our web server.&quot;</span>)<br>&#125;)<br><span class="hljs-comment">// 启动服务器</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 指定服务器运行的端口</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server is running at &lt;http://127.0.0.1:8080&gt;&quot;</span>)<br>&#125;)<br><span class="hljs-comment">// 通过运行 node js文件 来启动</span><br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// req是请求对象, 包含了与客户端相关的数据与属性, 如:</span><br><span class="hljs-comment">// req.url: 客户端请求的url地址</span><br><span class="hljs-comment">// req.method: 客户端的method的请求类型</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;Your request url is $&#123;req.url&#125;, and request method is $&#123;req.method&#125;&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<br>&#125;)<br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// res是响应对象, 包含了与服务器相关的数据与属性, 如:</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;Your request url is $&#123;req.url&#125;, and request method is $&#123;req.method&#125;&quot;</span><br>res.<span class="hljs-title function_">end</span>(str) <span class="hljs-comment">// 向客户端发送指定的内容, 并结束这次请求的处理过程</span><br>&#125;)<br><br><span class="hljs-comment">// 解决中文乱码的问题</span><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;您请求的url地址是$&#123;req.url&#125;, 请求的method类型为$&#123;req.method&#125;&quot;</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>)<br>res.<span class="hljs-title function_">end</span>(str)<br>&#125;)<br><br><span class="hljs-comment">// 根据不同的url响应不同的html内容</span><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br><span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#x27;</span><br><span class="hljs-keyword">if</span>(url === <span class="hljs-string">&quot;/&quot;</span> || url === <span class="hljs-string">&quot;/index/html&quot;</span>)&#123;<br>content = <span class="hljs-string">&quot;&lt;h1&gt;首页&lt;/h1&gt;&quot;</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(url === <span class="hljs-string">&quot;/about.html&quot;</span>)&#123;<br>content = <span class="hljs-string">&quot;&lt;h1&gt;关于页面&lt;/h1&gt;&quot;</span><br>&#125;<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>)<br>res.<span class="hljs-title function_">end</span>(content)<br>&#125;)<br><br><span class="hljs-comment">// 加载用户自定义模块</span><br><span class="hljs-keyword">const</span> custom = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./custom.js&quot;</span>)<br><span class="hljs-comment">// 使用require方法加载其它模块时, 会执行被加载模块中的代码</span><br></code></pre></td></tr></table></figure><p>模块作用域: 可避免全局变量污染的问题</p><p>module: 在每个.js自定义模块中都有一个module对象,存储了与当前模块有关的信息</p><p>外界用require()方法导入自定义模块时,得到的就是module.exports所指向的对象</p><p>在一个自定义模块中, 默认情况下, module.exports = {}</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 在module.exports对象上挂载属性/方法</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">username</span> = <span class="hljs-string">&quot;zhangsan&quot;</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello!&quot;</span>)<br>&#125;<br><span class="hljs-keyword">const</span> age = <span class="hljs-number">20</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">age</span> = age<br></code></pre></td></tr></table></figure><p>exports: 默认情况下,exports和module.exports指向的是同一个对象(代码简化)</p><p>包共享平台:</p><p>https://www.npmjs.com(搜索)</p><p>https://registry.npmjs.org(下载)</p><p>包管理工具:</p><p>Node Package Manager(npm包管理工具), 随Node.js的安装一并安装</p><p>用npm安装包: npm install 包完整名称 / npm i 包完整名称</p><p>初次装包完成后,项目文件夹下会出现node_modules文件夹和package-lock.json配置文件;node_modules文件夹用于存放所有已安装到项目中的包;package-lock.json配置文件用于记录node_modules目录下每一个包的下载信息(包名,版本号, 下载地址等)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm i moment <span class="hljs-comment">// 自动安装版本最新的包</span><br>npm i moment@<span class="hljs-number">2.22</span><span class="hljs-number">.2</span> <span class="hljs-comment">// 安装指定版本的包</span><br><span class="hljs-comment">// 大版本.功能版本.Bug修复版本</span><br></code></pre></td></tr></table></figure><p>包管理配置文件(package.json): 位于项目根目录,记录与项目有关的一些配置信息,从而方便在剔除node_modules目录之后在团队成员之间共享项目源代码</p><p>注: 在项目开发中, 把node_modules文件夹添加到.gitignore忽略文件中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 在执行命令所处的目录中, 快速新建package.json文件</span><br>npm init -y <span class="hljs-comment">// 项目文件夹不能出现中文和空格</span><br><span class="hljs-comment">// 使用npm命令安装包时, npm包管理工具会自动将包名称与版本号记录到package.json文件中</span><br><br>npm install <span class="hljs-comment">// (或 npm i)</span><br><span class="hljs-comment">// 包管理工具会读取package.json中的dependencies节点, 并根据读取到的依赖名称和版本号</span><br><span class="hljs-comment">// 一次性安装这些包</span><br><br>npm uninstall moment <span class="hljs-comment">// 卸载指定的moment包</span><br></code></pre></td></tr></table></figure><p>对于只在项目开发阶段用到、项目上线之后不会用到的包,应该把这些包记录到devDependencies中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm i monment -D <span class="hljs-comment">// 或 npm install moment --save-dev</span><br></code></pre></td></tr></table></figure><ul><li>模块的加载机制</li></ul><p>模块在第一次加载后会被缓存, 然后优先从缓存中加载</p><p>内置模块(Node.js官方提供的模块)的加载优先级最高</p><p>加载自定义模块时, 必须指定以./或../开头的路径标识符</p><p>第三方模块从node_modules文件夹中进行加载,如果没有找到对应的第三方模块, 则移动到再上一层父目录中进行加载,直到文件系统的根目录</p><ul><li>目录作为模块的加载机制</li></ul><p>在被加载的目录中查找package.json文件, 并寻找main属性,作为require加载的入口</p><p>若没有package.json文件或main入口不存在或无法解析,则尝试加载目录下的index.js文件; 若都不存在, 则在终端打印错误信息</p><ul><li>Express: 基于http内置模块进一步封装出来的, 效率更高,可以方便、快速地创建web网站服务器或API接口服务器</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm i express@<span class="hljs-number">4.17</span><span class="hljs-number">.2</span><br><span class="hljs-comment">// 导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-comment">// 创建web服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-comment">// 调用app.listen(端口号, 启动成功后的回调函数), 启动服务器</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;express server is running at &lt;http://127.0.0.1&gt;&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 通过app.get()来监听客户端GET请求</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;请求的url地址&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<span class="hljs-comment">/*处理函数*/</span>&#125;)<br><span class="hljs-comment">// req为请求对象, res为响应对象, 都包含了相应的属性和方法</span><br><br><span class="hljs-comment">// 通过app.post()来监听客户端的POST请求</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;请求的url地址&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<span class="hljs-comment">/*处理函数*/</span>&#125;)<br><br><span class="hljs-comment">// 将内容响应给客户端</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;请求成功&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 通过req.query(默认情况下为空对象)获取客户端发送的查询参数</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>)<br>res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">query</span>)<br>&#125;)<br><span class="hljs-comment">// 直接在网址处传入查询参数</span><br><span class="hljs-comment">// &lt;http://127.0.0.1/?name=zhangsan&amp;age=20&gt;</span><br><br><span class="hljs-comment">// 获取url中的动态参数</span><br><span class="hljs-comment">// 通过req.params对象, 可以访问到url中通过:匹配到的动态参数</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/:id/:name&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">params</span>)<br>res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>)<br>&#125;)<br><span class="hljs-comment">// 请求: &lt;http://127.0.0.1/user/2/zhangsan&gt;</span><br><span class="hljs-comment">// 返回: &#123;</span><br><span class="hljs-comment">//        &quot;id&quot;: &quot;2&quot;</span><br><span class="hljs-comment">//        &quot;name&quot;: &quot;zhangsan&quot;</span><br><span class="hljs-comment">//       &#125;</span><br><br><span class="hljs-comment">// express.static(): 创建一个静态资源服务器</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;public&quot;</span>)) <span class="hljs-comment">// 将public目录下的文件对外开放访问</span><br><span class="hljs-comment">// Express在指定的静态目录在查找文件, 并对外提供提供资源的访问路径,</span><br><span class="hljs-comment">// 存放静态文件的目录名不会出现在url中</span><br><span class="hljs-comment">// e.g &lt;http://localhost:3000/image/bg.jpg&gt;</span><br><br><span class="hljs-comment">// 托管多个静态资源目录, 根据目录的添加顺序进行查找</span><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;public&quot;</span>))<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;files&quot;</span>))<br><br><span class="hljs-comment">// 挂载路径前缀</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;public&quot;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;public&quot;</span>))<br><span class="hljs-comment">// e.g &lt;http://localhost:3000/public/image/bg.jpg&gt;</span><br></code></pre></td></tr></table></figure><ul><li>nodemon: 监听项目文件的变动, 当代码被修改后会自动重启项目,不需要手动close</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm install -g nodemon<br><span class="hljs-comment">// 启动时将node app.js替换为nodemon app.js即可</span><br></code></pre></td></tr></table></figure><ul><li>Express中的路由: 客户端请求与服务器处理函数之间的映射关系</li></ul><p>路由有3部分组成: 请求的类型, 请求的url地址, 处理函数;若请求的类型、请求的url地址能够匹配成功,则Express会将这次请求交给对应的处理函数来处理</p><ul><li>模块化路由: 将路由抽离为单独的模块, 而不是直接挂载到app上</li></ul><p>创建路由模块对应的.js文件; 调用express.Router()函数创建路由对象;</p><p>向路由对象上挂载具体的路由; 使用module.exports向外共享路由对象;</p><p>使用app.use()函数注册路由模块</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>()<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user/list&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Get user list.&quot;</span>)<br>&#125;)<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user/list&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Add new user.&quot;</span>)<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router <span class="hljs-comment">// 将创建的路由模块导出</span><br>----------------------------------------------<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./myrouter.js&quot;</span>) <span class="hljs-comment">// 导入路由模块</span><br>app.<span class="hljs-title function_">use</span>(router) <span class="hljs-comment">// 注册路由模块</span><br><span class="hljs-comment">// app.use()的作用为注册全局中间件</span><br><span class="hljs-comment">// 添加访问前缀/api: app.use(&quot;/api&quot;, router)</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;&lt;http://127.0.0.1&gt;&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 中间件处理函数: function(req, res, next); 路由处理函数: function(req, res)</span><br><span class="hljs-comment">// next函数是实现多个中间件连续调用的关键, 表示把流转关系转交给下一个中间件或路由</span><br><span class="hljs-comment">// 即先经过合适的中间件, 再经过路由</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">const</span> mw = <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;最简单的中间件函数&quot;</span>)<br><span class="hljs-title function_">next</span>()<br>&#125;<br><span class="hljs-comment">// 将mw注册为全局生效的中间件(即客户端任何请求到达服务器都会触发的中间件)</span><br><span class="hljs-comment">// app.use(mw)</span><br><span class="hljs-comment">// 也可简化定义为</span><br><span class="hljs-comment">// app.use(function(req, res, next)&#123;</span><br><span class="hljs-comment">//   console.log(&quot;最简单的中间件函数&quot;)</span><br><span class="hljs-comment">// next()</span><br><span class="hljs-comment">// &#125;)</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;&lt;http://127.0.0.1&gt;&quot;</span>)<br>&#125;)<br><span class="hljs-comment">// 多个中间件之间共享同一份req和res, 都可以挂载自定义的属性和方法</span><br><br><span class="hljs-comment">// 定义多个全局中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了第1个全局中间件&quot;</span>)<br><span class="hljs-title function_">next</span>()<br>&#125;)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用了第2个全局中间件&quot;</span>)<br><span class="hljs-title function_">next</span>()<br>&#125;)<br><br><span class="hljs-comment">// 使用局部中间件</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, mw, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Home page.&quot;</span>)<br>&#125;)<br><span class="hljs-comment">// 使用多个局部中间件</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, mw1, mw2, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Home page.&quot;</span>)&#125;)<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, [mw1, mw2], <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Home page.&quot;</span>)&#125;)<br><span class="hljs-comment">// 注: 中间件需要注册在路由前面</span><br><span class="hljs-comment">// 错误级别的中间件 (这种中间级需要注册在路由后面)</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;发生错误!&quot;</span>)<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Home page.&quot;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err, req, res, next</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;发生错误:&quot;</span> + err.<span class="hljs-property">message</span>)<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;error&quot;</span> + err.<span class="hljs-property">message</span>)<br>&#125;)<br><br><span class="hljs-comment">// Express内置的中间件</span><br>express.<span class="hljs-property">static</span>: 快速托管静态资源的内置中间件<br>express.<span class="hljs-property">json</span>: 解析<span class="hljs-title class_">JSON</span>格式的请求体数据<br>express.<span class="hljs-property">urlencoded</span>: 解析<span class="hljs-variable constant_">URL</span>-encoded格式的请求体数据<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span>&#125;))<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 在服务器中可以用req.body这个属性来接收客户端发送的请求体数据</span><br><span class="hljs-comment">// 若不配置解析表单数据的中间件, 则req.body默认等于undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 第三方中间件</span><br>npm install body-parser<br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>)<br>app.<span class="hljs-title function_">use</span>(parser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span>&#125;))<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 自定义解析表单的中间件</span><br><span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;querystring&quot;</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// 监听req的data事件, 来获取客户端发送给服务器的数据</span><br>req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>str += chunk<br>&#125;)<br><span class="hljs-comment">// 监听req的end事件(当请求体数据接收完毕后自动触发)</span><br>req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<br><span class="hljs-keyword">const</span> body = qs.<span class="hljs-title function_">parse</span>(str)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(body)<br><span class="hljs-comment">// req.body = body</span><br><span class="hljs-comment">// next()</span><br>&#125;)<br>&#125;)<br>--------------------------------------------------<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">bodyParser</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// 监听req的data事件, 来获取客户端发送给服务器的数据</span><br>req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>str += chunk<br>&#125;)<br><span class="hljs-comment">// 监听req的end事件(当请求体数据接收完毕后自动触发)</span><br>req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<br><span class="hljs-keyword">const</span> body = qs.<span class="hljs-title function_">parse</span>(str)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(body)<br><span class="hljs-comment">// req.body = body</span><br><span class="hljs-comment">// next()</span><br>&#125;)<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = bodyParser<br></code></pre></td></tr></table></figure><ul><li>cors: Express的一个第三方中间件,可以解决跨域问题(协议或域名或端口号不同)</li></ul><p>只需在服务器端配置, 客户端无需做任何额外配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs jsx">npm install cors<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>) <span class="hljs-comment">// 一定要在路由之前进行配置</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>())<br><br>...<br>&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnGET&quot;</span>&gt;</span>GET<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnPOST&quot;</span>&gt;</span>POST<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnJSONP&quot;</span>&gt;</span>JSONP<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#btnGET&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&lt;http://127.0.0.1/api/get&gt;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#btnPOST&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&lt;http://127.0.0.1/api/post&gt;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">bookname</span>: <span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;test2&quot;</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#btnJSONP&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$.<span class="hljs-title function_">ajax</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&lt;http://127.0.0.1/api/jsonp&gt;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br>...<br><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;&lt;http://itcast.cn&gt;&quot;</span>) <span class="hljs-comment">// 只允许来自http://itcast.cn的跨域请求</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>) <span class="hljs-comment">// 允许来自任何域的请求</span><br><br><span class="hljs-comment">// 默认情况下, CORS仅支持客户端发起GET, POST, HEAD请求</span><br><span class="hljs-comment">// 若要使用PUT, DELETE等请求, 则需要进行声明</span><br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;HEAD&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>)<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在远程服务器配置Clash</title>
    <link href="/2023/08/30/%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEClash/"/>
    <url>/2023/08/30/%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEClash/</url>
    
    <content type="html"><![CDATA[<ul><li>在 https://github.com/doreamon-design/clash/releases下载与自己系统相符的安装包，一般选择clash_2.0.24_linux_amd64.tar.gz</li><li>将压缩包传至远程服务器后，执行以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf clash_2.0.24_linux_amd64.tar<br><span class="hljs-built_in">mv</span> clash_2.0.24_linux_amd64 /usr/local/bin/clash<br>clash -v<br></code></pre></td></tr></table></figure><p>若能显示clash的版本，则说明已成功安装</p><ul><li><p>在远程服务器的/etc目录下新建clash目录；查看本机的clash配置，将config.yaml文件传至远程服务器，并移动至/etc/clash目录下；下载相应的Country.mmdb(网上很好找) 并移动至/etc/clash目录下</p></li><li><p>新建tmux窗口，并执行如下命令：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clash -d /etc/clash<br></code></pre></td></tr></table></figure><ul><li>在终端中执行以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7891<br></code></pre></td></tr></table></figure><p>完成上述步骤后，理论上便已成功配置，若出现如下的连接失败的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">INFO[0000] Can<span class="hljs-string">&#x27;t find MMDB, start download</span><br><span class="hljs-string">FATA[0000] Initial configuration directory error: can&#x27;</span>t initial MMDB: can<span class="hljs-string">&#x27;t download MMDB: Get &quot;https://cdn.jsdelivr.net/gh/Dreamacro/maxmind-geoip@release/Country.mmdb&quot;: proxyconnect tcp: dial tcp 127.0.0.1:7890: connect: connection refused</span><br></code></pre></td></tr></table></figure><p>则可能是端口占用的问题，查看如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> | grep -i proxy<br></code></pre></td></tr></table></figure><p>取消端口占用，再次查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> http_proxy https_proxy <br><span class="hljs-built_in">export</span> | grep -i proxy<br></code></pre></td></tr></table></figure><p>重新设置，之后即可正常连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">declare</span> -x http_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br><span class="hljs-built_in">declare</span> -x https_proxy=<span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span><br></code></pre></td></tr></table></figure><p>为避免网络连接不稳定，也可以在代码中加入如下设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">import os<br>os.environ[<span class="hljs-string">&#x27;HTTP_PROXY&#x27;</span>] = <span class="hljs-string">&#x27;http://127.0.0.1:7890&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;HTTPS_PROXY&#x27;</span>] = <span class="hljs-string">&#x27;http://127.0.0.1:7890&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
